["a03d8c1971eea0b9f7e7c37ff3eb94019f0d2637","e0d8911eb745a4bcc8a13b5fd92f35295212222d",["ListView","React","RefreshControl","ScrollView","fbjs/lib/invariant"],[60,93,132,176,216],{"version":3,"sources":["/firstPro/node_modules/react-native/Libraries/Lists/MetroListView.js"],"names":["ListView","require","React","RefreshControl","ScrollView","invariant","MetroListView","state","_computeState","props","ds","DataSource","rowHasChanged","itemA","itemB","sectionHeaderHasChanged","getSectionHeaderData","dataBlob","sectionID","sectionHeaderData","_captureRef","ref","_listRef","_renderFooter","_renderRow","item","rowID","highlightRow","renderItem","index","_renderSectionHeader","section","renderSectionHeader","_renderSeparator","sID","rID","params","Error","animated","offset","scrollTo","horizontal","x","y","newProps","setState","FooterComponent","sections","SeparatorComponent","items","forEach","sectionIn","ii","data","cloneWithRowsAndSections","cloneWithRows","Component","defaultProps","keyExtractor","key","String","renderScrollComponent","onRefresh","refreshing","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule MetroListView\n * @flow\n */\n'use strict';\n\nconst ListView = require('ListView');\nconst React = require('React');\nconst RefreshControl = require('RefreshControl');\nconst ScrollView = require('ScrollView');\n\nconst invariant = require('fbjs/lib/invariant');\n\ntype Item = any;\n\ntype NormalProps = {\n  FooterComponent?: ReactClass<*>,\n  renderItem: (info: Object) => ?React.Element<*>,\n  renderSectionHeader?: ({section: Object}) => ?React.Element<*>,\n  SeparatorComponent?: ?ReactClass<*>, // not supported yet\n\n  // Provide either `items` or `sections`\n  items?: ?Array<Item>, // By default, an Item is assumed to be {key: string}\n  // $FlowFixMe - Something is a little off with the type Array<Item>\n  sections?: ?Array<{key: string, data: Array<Item>}>,\n\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?Function,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: boolean,\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n};\ntype DefaultProps = {\n  keyExtractor: (item: Item, index: number) => string,\n};\n/* $FlowFixMe - the renderItem passed in from SectionList is optional there but\n * required here */\ntype Props = NormalProps & DefaultProps;\n\n/**\n * This is just a wrapper around the legacy ListView that matches the new API of FlatList, but with\n * some section support tacked on. It is recommended to just use FlatList directly, this component\n * is mostly for debugging and performance comparison.\n */\nclass MetroListView extends React.Component {\n  props: Props;\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    throw new Error('scrollToEnd not supported in legacy ListView.');\n  }\n  scrollToIndex(params: {animated?: ?boolean, index: number, viewPosition?: number}) {\n    throw new Error('scrollToIndex not supported in legacy ListView.');\n  }\n  scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number}) {\n    throw new Error('scrollToItem not supported in legacy ListView.');\n  }\n  scrollToLocation(params: {\n    animated?: ?boolean,\n    itemIndex: number,\n    sectionIndex: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    throw new Error('scrollToLocation not supported in legacy ListView.');\n  }\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    const {animated, offset} = params;\n    this._listRef.scrollTo(\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated}\n    );\n  }\n  getListRef() {\n    return this._listRef;\n  }\n  static defaultProps: DefaultProps = {\n    keyExtractor: (item, index) => item.key || String(index),\n    renderScrollComponent: (props: Props) => {\n      if (props.onRefresh) {\n        return (\n          <ScrollView\n            {...props}\n            refreshControl={\n              <RefreshControl\n                refreshing={props.refreshing}\n                onRefresh={props.onRefresh}\n              />\n            }\n          />\n        );\n      } else {\n        return <ScrollView {...props} />;\n      }\n    },\n  };\n  state = this._computeState(\n    this.props,\n    {\n      ds: new ListView.DataSource({\n        rowHasChanged: (itemA, itemB) => true,\n        sectionHeaderHasChanged: () => true,\n        getSectionHeaderData: (dataBlob, sectionID) => this.state.sectionHeaderData[sectionID],\n      }),\n      sectionHeaderData: {},\n    },\n  );\n  componentWillReceiveProps(newProps: Props) {\n    this.setState((state) => this._computeState(newProps, state));\n  }\n  render() {\n    return (\n      <ListView\n        {...this.props}\n        dataSource={this.state.ds}\n        ref={this._captureRef}\n        renderRow={this._renderRow}\n        renderFooter={this.props.FooterComponent && this._renderFooter}\n        renderSectionHeader={this.props.sections && this._renderSectionHeader}\n        renderSeparator={this.props.SeparatorComponent && this._renderSeparator}\n      />\n    );\n  }\n  _listRef: ListView;\n  _captureRef = (ref) => { this._listRef = ref; };\n  _computeState(props: Props, state) {\n    const sectionHeaderData = {};\n    if (props.sections) {\n      invariant(!props.items, 'Cannot have both sections and items props.');\n      const sections = {};\n      props.sections.forEach((sectionIn, ii) => {\n        const sectionID = 's' + ii;\n        sections[sectionID] = sectionIn.data;\n        sectionHeaderData[sectionID] = sectionIn;\n      });\n      return {\n        ds: state.ds.cloneWithRowsAndSections(sections),\n        sectionHeaderData,\n      };\n    } else {\n      invariant(!props.sections, 'Cannot have both sections and items props.');\n      return {\n        ds: state.ds.cloneWithRows(props.items),\n        sectionHeaderData,\n      };\n    }\n  }\n  _renderFooter = () => <this.props.FooterComponent key=\"$footer\" />;\n  _renderRow = (item, sectionID, rowID, highlightRow) => {\n    return this.props.renderItem({item, index: rowID});\n  };\n  _renderSectionHeader = (section, sectionID) => {\n    const {renderSectionHeader} = this.props;\n    invariant(renderSectionHeader, 'Must provide renderSectionHeader with sections prop');\n    return renderSectionHeader({section});\n  }\n  _renderSeparator = (sID, rID) => <this.props.SeparatorComponent key={sID + rID} />;\n}\n\nmodule.exports = MetroListView;\n"]}]