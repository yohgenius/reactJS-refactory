["640e661fe823bd954f5b0646c2a9fe97ed0b04e2","16f3b42bdb11245b2cd4e74a536dc02bd4fb8c49",["fbemitter","invariant","fbjs/lib/warning","react-native"],[91,131,236,348],{"version":3,"sources":["/firstPro/node_modules/expo/src/Notifications.js"],"names":["ExponentNotifications","_emitter","_initialNotification","_warnedAboutDeprecatedPushTokenMethod","_maybeInitEmitter","addListener","_emitNotification","notification","JSON","parse","data","e","emit","_processNotification","hasOwnProperty","count","OS","android","ios","_validateNotification","title","body","_setInitialNotification","getExpoPushTokenAsync","getExponentPushTokenAsync","console","warn","getDevicePushTokenAsync","presentLocalNotificationAsync","presentLocalNotification","scheduleLocalNotificationAsync","options","now","Date","time","timeAsDateObj","Error","getTime","repeat","validOptions","Set","has","scheduleLocalNotification","dismissNotificationAsync","notificationId","dismissNotification","Promise","reject","dismissAllNotificationsAsync","dismissAllNotifications","cancelScheduledNotificationAsync","cancelScheduledNotification","cancelAllScheduledNotificationsAsync","cancelAllScheduledNotifications","listener","initialNotification","setTimeout","getBadgeNumberAsync","setBadgeNumberAsync","number"],"mappings":"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","sourcesContent":["// @flow\n\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport invariant from 'invariant';\nimport warning from 'fbjs/lib/warning';\n\nimport { DeviceEventEmitter, NativeModules, Platform } from 'react-native';\n\nconst { ExponentNotifications } = NativeModules;\n\ntype Notification = {\n  origin: 'selected' | 'received',\n  data: any,\n  remote: boolean,\n  isMultiple: boolean,\n};\n\ntype LocalNotification = {\n  title: string,\n  // How should we deal with body being required on iOS but not on Android?\n  body?: string,\n  data?: any,\n  ios?: {\n    sound?: boolean,\n  },\n  android?: {\n    sound?: boolean,\n    icon?: string,\n    color?: string,\n    priority?: string,\n    sticky?: boolean,\n    vibrate?: boolean | Array<number>,\n    link?: string,\n  },\n};\n\n// Android assigns unique number to each notification natively.\n// Since that's not supported on iOS, we generate an unique string.\ntype LocalNotificationId = string | number;\n\nlet _emitter;\nlet _initialNotification;\nlet _warnedAboutDeprecatedPushTokenMethod = false;\n\nfunction _maybeInitEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    DeviceEventEmitter.addListener('Exponent.notification', _emitNotification);\n  }\n}\n\nfunction _emitNotification(notification) {\n  if (typeof notification === 'string') {\n    notification = JSON.parse(notification);\n  }\n\n  /* Don't mutate the original notification */\n  notification = { ...notification };\n\n  if (typeof notification.data === 'string') {\n    try {\n      notification.data = JSON.parse(notification.data);\n    } catch (e) {\n      // It's actually just a string, that's fine\n    }\n  }\n\n  _emitter.emit('notification', notification);\n}\n\nfunction _processNotification(notification) {\n  notification = Object.assign({}, notification);\n\n  if (!notification.data) {\n    notification.data = {};\n  }\n\n  if (notification.hasOwnProperty('count')) {\n    delete notification.count;\n  }\n\n  // Delete any Android properties on iOS and merge the iOS properties on root\n  // notification object\n  if (Platform.OS === 'ios') {\n    if (notification.android) {\n      delete notification.android;\n    }\n\n    if (notification.ios) {\n      notification = Object.assign(notification, notification.ios);\n      delete notification.ios;\n    }\n  }\n\n  // Delete any iOS properties on Android and merge the Android properties on\n  // root notification object\n  if (Platform.OS === 'android') {\n    if (notification.ios) {\n      delete notification.ios;\n    }\n\n    if (notification.android) {\n      notification = Object.assign(notification, notification.android);\n      delete notification.android;\n    }\n  }\n\n  return notification;\n}\n\nfunction _validateNotification(notification) {\n  if (Platform.OS === 'ios') {\n    invariant(\n      !!notification.title && !!notification.body,\n      'Local notifications on iOS require both a title and a body'\n    );\n  } else if (Platform.OS === 'android') {\n    invariant(\n      !!notification.title,\n      'Local notifications on Android require a title'\n    );\n  }\n}\n\nexport default {\n  /* Only used internally to initialize the notification from top level props */\n  _setInitialNotification(notification: Notification) {\n    _initialNotification = notification;\n  },\n\n  /* Re-export, we can add flow here if we want as well */\n  getExpoPushTokenAsync: ExponentNotifications.getExponentPushTokenAsync,\n  getExponentPushTokenAsync(...args) {\n    if (!_warnedAboutDeprecatedPushTokenMethod) {\n      console.warn(\n        `Notifications.getExponentPushTokenAsync is deprecated and will be removed in SDK 21. Call Notifications.getExpoPushTokenAsync (which has the exact same behavior) instead.`\n      );\n      _warnedAboutDeprecatedPushTokenMethod = true;\n    }\n    return ExponentNotifications.getExponentPushTokenAsync(...args);\n  },\n\n  /* Re-export, we can add flow here if we want as well */\n  getDevicePushTokenAsync: ExponentNotifications.getDevicePushTokenAsync,\n\n  /* Shows a notification instantly */\n  presentLocalNotificationAsync(\n    notification: LocalNotification\n  ): Promise<LocalNotificationId> {\n    _validateNotification(notification);\n    notification = _processNotification(notification);\n\n    return ExponentNotifications.presentLocalNotification(notification);\n  },\n\n  /* Schedule a notification at a later date */\n  async scheduleLocalNotificationAsync(\n    notification: LocalNotification,\n    options: {\n      time?: Date | number,\n      repeat?: 'minute' | 'hour' | 'day' | 'week' | 'month' | 'year',\n    } = {}\n  ): Promise<LocalNotificationId> {\n    // set now at the beginning of the method, to prevent potential\n    // weird warnings when we validate options.time later on\n    const now = Date.now();\n\n    // Validate and process the notification data\n    _validateNotification(notification);\n    notification = _processNotification(notification);\n\n    // Validate `options.time`\n    if (options.time) {\n      let timeAsDateObj = null;\n      if (options.time && typeof options.time === 'number') {\n        timeAsDateObj = new Date(options.time);\n        // god, JS is the worst\n        if (((timeAsDateObj: any): string) == 'Invalid Date') {\n          timeAsDateObj = null;\n        }\n      } else if (options.time && options.time instanceof Date) {\n        timeAsDateObj = options.time;\n      }\n\n      // If we couldn't convert properly, throw an error\n      if (!timeAsDateObj) {\n        throw new Error(\n          `Provided value for \"time\" is invalid. Please verify that it's either a number representing Unix Epoch time in milliseconds, or a valid date object.`\n        );\n      }\n\n      // If someone passes in a value that is too small, say, by an order of 1000\n      // (it's common to accidently pass seconds instead of ms), display a warning.\n      warning(\n        timeAsDateObj >= now,\n        `Provided value for \"time\" is before the current date. Did you possibly pass number of seconds since Unix Epoch instead of number of milliseconds?`\n      );\n\n      // If iOS, pass time as milliseconds\n      if (Platform.OS === 'ios') {\n        options = {\n          ...options,\n          time: timeAsDateObj.getTime(),\n        };\n      } else {\n        options = {\n          ...options,\n          time: timeAsDateObj,\n        };\n      }\n    }\n\n    // Validate options.repeat\n    if (options.repeat) {\n      const validOptions = new Set([\n        'minute',\n        'hour',\n        'day',\n        'week',\n        'month',\n        'year',\n      ]);\n      if (!validOptions.has(options.repeat)) {\n        throw new Error(\n          `Please pass one of ['minute', 'hour', 'day', 'week', 'month', 'year'] as the value for the \"repeat\" option`\n        );\n      }\n    }\n\n    return ExponentNotifications.scheduleLocalNotification(\n      notification,\n      options\n    );\n  },\n\n  /* Dismiss currently shown notification with ID (Android only) */\n  async dismissNotificationAsync(\n    notificationId: LocalNotificationId\n  ): Promise<void> {\n    if (Platform.OS === 'android') {\n      return ExponentNotifications.dismissNotification(notificationId);\n    } else {\n      return Promise.reject('Dismissing notifications is not supported on iOS');\n    }\n  },\n\n  /* Dismiss all currently shown notifications (Android only) */\n  async dismissAllNotificationsAsync(): Promise<void> {\n    if (Platform.OS === 'android') {\n      return ExponentNotifications.dismissAllNotifications();\n    } else {\n      return Promise.reject('Dismissing notifications is not supported on iOS');\n    }\n  },\n\n  /* Cancel scheduled notification notification with ID */\n  async cancelScheduledNotificationAsync(\n    notificationId: LocalNotificationId\n  ): Promise<void> {\n    return ExponentNotifications.cancelScheduledNotification(notificationId);\n  },\n\n  /* Cancel all scheduled notifications */\n  async cancelAllScheduledNotificationsAsync(): Promise<void> {\n    return ExponentNotifications.cancelAllScheduledNotifications();\n  },\n\n  /* Primary public api */\n  addListener(listener: Function): EventSubscription {\n    _maybeInitEmitter();\n\n    if (_initialNotification) {\n      const initialNotification = _initialNotification;\n      _initialNotification = null;\n      setTimeout(() => {\n        _emitNotification(initialNotification);\n      }, 0);\n    }\n\n    return _emitter.addListener('notification', listener);\n  },\n\n  async getBadgeNumberAsync(): Promise<number> {\n    if (!ExponentNotifications.getBadgeNumberAsync) {\n      return 0;\n    }\n    return ExponentNotifications.getBadgeNumberAsync();\n  },\n\n  async setBadgeNumberAsync(number: number): Promise<void> {\n    if (!ExponentNotifications.setBadgeNumberAsync) {\n      return;\n    }\n    return ExponentNotifications.setBadgeNumberAsync(number);\n  },\n};\n"]}]