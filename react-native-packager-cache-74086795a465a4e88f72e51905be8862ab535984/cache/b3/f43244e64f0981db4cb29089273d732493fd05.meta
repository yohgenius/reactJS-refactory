["2363236403d6f1a9318e9afcec302296426f914c","c4e8bb11beeaceb2e8094fcac2422646ec8b1e7c",["lodash.map","lodash.zipobject","websql/custom","react-native"],[88,188,294,401],{"version":3,"sources":["/firstPro/node_modules/expo/src/SQLite.js"],"names":["ExponentSQLite","process","nextTick","setTimeout","callback","SQLiteResult","error","insertId","rowsAffected","rows","massageError","err","Error","SQLiteDatabase","name","_name","dearrayifyRow","res","rawError","columns","zippedRows","i","len","length","push","arrayifyQuery","query","sql","escapeForAndroid","args","OS","JSON","stringify","prototype","exec","queries","readOnly","onSuccess","rawResults","results","onError","then","openDB","openDatabase","version","description","size"],"mappings":"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","sourcesContent":["import map from 'lodash.map';\nimport zipObject from 'lodash.zipobject';\n\nimport customOpenDatabase from 'websql/custom';\n\nimport { NativeModules, Platform } from 'react-native';\nconst { ExponentSQLite } = NativeModules;\n\nif (!process.nextTick) {\n  process.nextTick = callback => setTimeout(callback, 0);\n}\n\nfunction SQLiteResult(error, insertId, rowsAffected, rows) {\n  this.error = error;\n  this.insertId = insertId;\n  this.rowsAffected = rowsAffected;\n  this.rows = rows;\n}\n\nfunction massageError(err) {\n  return typeof err === 'string' ? new Error(err) : err;\n}\n\nfunction SQLiteDatabase(name) {\n  this._name = name;\n}\n\nfunction dearrayifyRow(res) {\n  // use a compressed array format to send minimal data between\n  // native and web layers\n  var rawError = res[0];\n  if (rawError) {\n    return new SQLiteResult(massageError(res[0]));\n  }\n  var insertId = res[1];\n  if (insertId === null) {\n    insertId = void 0; // per the spec, should be undefined\n  }\n  var rowsAffected = res[2];\n  var columns = res[3];\n  var rows = res[4];\n  var zippedRows = [];\n  for (var i = 0, len = rows.length; i < len; i++) {\n    zippedRows.push(zipObject(columns, rows[i]));\n  }\n\n  // v8 likes predictable objects\n  return new SQLiteResult(null, insertId, rowsAffected, zippedRows);\n}\n\n// send less data over the wire, use an array\nfunction arrayifyQuery(query) {\n  return [query.sql, escapeForAndroid(query.args || [])];\n}\n\n// for avoiding strings truncated with '\\u0000'\nfunction escapeForAndroid(args) {\n  if (Platform.OS === 'android') {\n    return JSON.stringify(args);\n  } else {\n    return args;\n  }\n}\n\nSQLiteDatabase.prototype.exec = function exec(queries, readOnly, callback) {\n  function onSuccess(rawResults) {\n    var results = map(rawResults, dearrayifyRow);\n    callback(null, results);\n  }\n\n  function onError(err) {\n    callback(massageError(err));\n  }\n\n  ExponentSQLite.exec(this._name, map(queries, arrayifyQuery), readOnly).then(\n    onSuccess,\n    onError\n  );\n};\n\nconst openDB = customOpenDatabase(SQLiteDatabase);\n\nfunction openDatabase(name, version, description, size, callback) {\n  if (name && typeof name === 'object') {\n    // accept SQLite Plugin 1-style object here\n    callback = version;\n    size = name.size;\n    description = name.description;\n    version = name.version;\n    name = name.name;\n  }\n  if (!size) {\n    size = 1;\n  }\n  if (!description) {\n    description = name;\n  }\n  if (!version) {\n    version = '1.0';\n  }\n  if (typeof name === 'undefined') {\n    throw new Error('please be sure to call: openDatabase(\"myname.db\")');\n  }\n  return openDB(name, version, description, size, callback);\n}\n\nexport default {\n  openDatabase,\n};\n"]}]