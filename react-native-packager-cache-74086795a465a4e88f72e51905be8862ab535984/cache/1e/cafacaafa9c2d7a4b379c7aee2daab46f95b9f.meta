["597c9d42e1e852886a69767e31d213da305c9ac8","072d58f8b9ee70a0944721627182f2a6797587eb",["react","prop-types","react-native","./GLView"],[87,182,292,332],{"version":3,"sources":["/firstPro/node_modules/expo/src/createTHREEViewClass.js"],"names":["warned","_onContextCreate","renderer","THREE","WebGLRenderer","canvas","width","gl","drawingBufferWidth","height","drawingBufferHeight","style","addEventListener","removeEventListener","clientHeight","context","setSize","setClearColor","props","backgroundColor","backgroundColorAlpha","lastFrameTime","animate","_requestAnimationFrameID","requestAnimationFrame","now","global","nativePerformanceNow","dt","tick","scene","camera","autoAspect","aspect","desiredAspect","updateProjectionMatrix","render","flush","endFrameEXP","console","warn","cancelAnimationFrame","viewProps","asset","localUri","Error","name","texture","Texture","image","data","needsUpdate","isDataTexture","Component","propTypes","object","bool","oneOfType","number","string","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ViewPropTypes } from 'react-native';\n\nimport GLView from './GLView';\n\nlet warned = false;\n\nexport default THREE => {\n  return class THREEView extends React.Component {\n    static propTypes = {\n      // Parameters to http://threejs.org/docs/?q=webgl#Reference/Renderers/WebGLRenderer.render\n      scene: PropTypes.object,\n      camera: PropTypes.object,\n\n      // Whether to automatically set the aspect ratio of the camera from\n      // the viewport. Defaults to `true`.\n      autoAspect: PropTypes.bool,\n\n      // NOTE: 0x000000 is considered a PropType.number, while '#000000' is considered a PropType.string.\n      backgroundColor: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n      ]),\n      backgroundColorAlpha: PropTypes.number,\n\n      // Called every animation frame with one parameter `dt` which is the\n      // time in seconds since the last animation frame\n      tick: PropTypes.func,\n\n      ...ViewPropTypes,\n    };\n\n    static defaultProps = {\n      autoAspect: true,\n      backgroundColor: 0x000000,\n      backgroundColorAlpha: 1,\n    };\n\n    componentDidMount() {\n      if (!warned) {\n        console.warn(\n          '`Expo.createTHREEViewClass(...)` is now deprecated and will be removed in version ' +\n            \"20.0.0 of 'expo'. Please use the separately available 'expo-three' library instead.\"\n        );\n        warned = true;\n      }\n    }\n\n    // Get a three.js texture from an Exponent Asset\n    static textureFromAsset(asset) {\n      if (!asset.localUri) {\n        throw new Error(\n          `Asset '${asset.name}' needs to be downloaded before ` +\n            `being used as an OpenGL texture.`\n        );\n      }\n      const texture = new THREE.Texture();\n      texture.image = {\n        data: asset,\n        width: asset.width,\n        height: asset.height,\n      };\n      texture.needsUpdate = true;\n      texture.isDataTexture = true; // send to gl.texImage2D() verbatim\n      return texture;\n    }\n\n    _onContextCreate = gl => {\n      const renderer = new THREE.WebGLRenderer({\n        canvas: {\n          width: gl.drawingBufferWidth,\n          height: gl.drawingBufferHeight,\n          style: {},\n          addEventListener: () => {},\n          removeEventListener: () => {},\n          clientHeight: gl.drawingBufferHeight,\n        },\n        context: gl,\n      });\n\n      renderer.setSize(gl.drawingBufferWidth, gl.drawingBufferHeight);\n      renderer.setClearColor(\n        this.props.backgroundColor,\n        this.props.backgroundColorAlpha\n      );\n\n      let lastFrameTime;\n      const animate = () => {\n        this._requestAnimationFrameID = requestAnimationFrame(animate);\n\n        const now = 0.001 * global.nativePerformanceNow();\n        const dt = typeof lastFrameTime !== 'undefined'\n          ? now - lastFrameTime\n          : 0.16666;\n\n        if (this.props.tick) {\n          this.props.tick(dt);\n        }\n\n        if (this.props.scene && this.props.camera) {\n          const camera = this.props.camera;\n          if (this.props.autoAspect && camera.aspect) {\n            const desiredAspect =\n              gl.drawingBufferWidth / gl.drawingBufferHeight;\n            if (camera.aspect !== desiredAspect) {\n              camera.aspect = desiredAspect;\n              camera.updateProjectionMatrix();\n            }\n          }\n          renderer.render(this.props.scene, camera);\n        }\n        gl.flush();\n        gl.endFrameEXP();\n\n        lastFrameTime = now;\n      };\n      animate();\n    };\n\n    componentWillUnmount() {\n      if (this._requestAnimationFrameID) {\n        cancelAnimationFrame(this._requestAnimationFrameID);\n      }\n    }\n\n    render() {\n      // eslint-disable-next-line no-unused-vars\n      const { scene, camera, autoAspect, tick, ...viewProps } = this.props;\n      return <GLView {...viewProps} onContextCreate={this._onContextCreate} />;\n    }\n  };\n};\n"]}]