["bcbaae2bd47eb9d1df68197f7818c79313714001","2327ce851c142f813f97dba52ee6cbf1fe42e2f1",["react-native"],[132],{"version":3,"sources":["/firstPro/node_modules/expo/src/lib/createSensorWrapper.js"],"names":["createSensorWrapper","NativeSensorModule","eventName","SensorEventEmitter","SensorWrapper","getListenerCount","listeners","length","listener","OS","hasListeners","startObserving","emitterSubscription","addListener","originalRemove","remove","removeSubscription","stopObserving","removeAllListeners","subscription","intervalMs","setUpdateInterval"],"mappings":";;;kBAEwBA,mB;;AAFxB;;AAEe,SAASA,mBAAT,CAA6BC,kBAA7B,EAAiDC,SAAjD,EAA4D;AACzE,MAAMC,qBAAqB,oCAAuBF,kBAAvB,CAA3B;;AADyE,MAGnEG,aAHmE;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qCAIxD;AACb,eAAO,KAAKC,gBAAL,KAA0B,CAAjC;AACD;AANsE;AAAA;AAAA,yCAQpD;AACjB,eAAOF,mBAAmBG,SAAnB,CAA6BJ,SAA7B,EAAwCK,MAA/C;AACD;AAVsE;AAAA;AAAA,kCAY3DC,QAZ2D,EAYjD;AAAA;;AACpB,YAAI,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,cAAI,CAAC,KAAKC,YAAL,EAAL,EAA0B;AACxBT,+BAAmBU,cAAnB;AACD;AACF;;AAED,YAAIC,sBAAsBT,mBAAmBU,WAAnB,CACxBX,SADwB,EAExBM,QAFwB,CAA1B;AAIA,YAAIM,iBAAiBF,oBAAoBG,MAAzC;;AAEAH,4BAAoBG,MAApB,GAA6B,YAAM;AACjC,iBAAO,MAAKC,kBAAL,CAAwBJ,mBAAxB,CAAP;AACD,SAFD;;AAIA,eAAOA,mBAAP;AACD;AA9BsE;AAAA;AAAA,2CAgClD;AACnB,YAAI,sBAASH,EAAT,KAAgB,SAApB,EAA+B;AAC7BR,6BAAmBgB,aAAnB;AACD;;AAED,eAAOd,mBAAmBe,kBAAnB,CAAsChB,SAAtC,CAAP;AACD;AAtCsE;AAAA;AAAA,yCAwCpDiB,YAxCoD,EAwCtC;AAC/B,YAAI,sBAASV,EAAT,KAAgB,SAApB,EAA+B;AAC7B,cAAI,KAAKJ,gBAAL,OAA4B,CAAhC,EAAmC;AACjCJ,+BAAmBgB,aAAnB;AACD;AACF;;AAED,eAAOd,mBAAmBa,kBAAnB,CAAsCG,YAAtC,CAAP;AACD;AAhDsE;AAAA;AAAA,wCAkDrDC,UAlDqD,EAkDzC;AAC5BnB,2BAAmBoB,iBAAnB,CAAqCD,UAArC;AACD;AApDsE;AAAA;AAAA;;AAuDzE,SAAO,IAAIhB,aAAJ,EAAP;AACD","sourcesContent":["import { Platform, NativeEventEmitter } from 'react-native';\n\nexport default function createSensorWrapper(NativeSensorModule, eventName) {\n  const SensorEventEmitter = new NativeEventEmitter(NativeSensorModule);\n\n  class SensorWrapper {\n    hasListeners() {\n      return this.getListenerCount() > 0;\n    }\n\n    getListenerCount() {\n      return SensorEventEmitter.listeners(eventName).length;\n    }\n\n    addListener(listener) {\n      if (Platform.OS === 'android') {\n        if (!this.hasListeners()) {\n          NativeSensorModule.startObserving();\n        }\n      }\n\n      let emitterSubscription = SensorEventEmitter.addListener(\n        eventName,\n        listener\n      );\n      let originalRemove = emitterSubscription.remove;\n\n      emitterSubscription.remove = () => {\n        return this.removeSubscription(emitterSubscription);\n      };\n\n      return emitterSubscription;\n    }\n\n    removeAllListeners() {\n      if (Platform.OS === 'android') {\n        NativeSensorModule.stopObserving();\n      }\n\n      return SensorEventEmitter.removeAllListeners(eventName);\n    }\n\n    removeSubscription(subscription) {\n      if (Platform.OS === 'android') {\n        if (this.getListenerCount() === 1) {\n          NativeSensorModule.stopObserving();\n        }\n      }\n\n      return SensorEventEmitter.removeSubscription(subscription);\n    }\n\n    setUpdateInterval(intervalMs) {\n      NativeSensorModule.setUpdateInterval(intervalMs);\n    }\n  }\n\n  return new SensorWrapper();\n}\n"]}]