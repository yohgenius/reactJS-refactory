["db85a87ac18697537331f6786691dde89aa674b9","39f5b4f18e65d8cce888ada2a22b1d78304bb3c5",["fbjs/lib/invariant","fbjs/lib/keyMirror"],[41,88],{"version":3,"sources":["/firstPro/node_modules/react-native/Libraries/vendor/core/mergeHelpers.js"],"names":["invariant","require","keyMirror","MAX_MERGE_DEPTH","isTerminal","o","mergeHelpers","normalizeMergeArg","arg","undefined","checkMergeArrayArgs","one","two","Array","isArray","checkMergeObjectArgs","checkMergeObjectArg","checkMergeIntoObjectArg","checkMergeLevel","level","checkArrayStrategy","strategy","ArrayStrategies","Clobber","IndexByIndex","module","exports"],"mappings":";;AAiCA;;AAEA,IAAIA,YAAYC,OAAZ,sBAAJ;AACA,IAAIC,YAAYD,OAAZ,sBAAJ;;AAMA,IAAIE,kBAAkB,EAAtB;;AAQA,IAAIC,aAAa,SAAbA,UAAa,CAASC,CAAT,EAAY;AAC3B,SAAO,OAAOA,CAAP,KAAa,QAAb,IAAyBA,MAAM,IAAtC;AACD,CAFD;;AAIA,IAAIC,eAAe;;AAEjBH,mBAAiBA,eAFA;;AAIjBC,cAAYA,UAJK;;AAYjBG,qBAAmB,2BAASC,GAAT,EAAc;AAC/B,WAAOA,QAAQC,SAAR,IAAqBD,QAAQ,IAA7B,GAAoC,EAApC,GAAyCA,GAAhD;AACD,GAdgB;;AAwBjBE,uBAAqB,6BAASC,GAAT,EAAcC,GAAd,EAAmB;AACtCZ,cACEa,MAAMC,OAAN,CAAcH,GAAd,KAAsBE,MAAMC,OAAN,CAAcF,GAAd,CADxB,EAEE,+CAFF,EAGED,GAHF,EAIEC,GAJF;AAMD,GA/BgB;;AAqCjBG,wBAAsB,8BAASJ,GAAT,EAAcC,GAAd,EAAmB;AACvCN,iBAAaU,mBAAb,CAAiCL,GAAjC;AACAL,iBAAaU,mBAAb,CAAiCJ,GAAjC;AACD,GAxCgB;;AA6CjBI,uBAAqB,6BAASR,GAAT,EAAc;AACjCR,cACE,CAACI,WAAWI,GAAX,CAAD,IAAoB,CAACK,MAAMC,OAAN,CAAcN,GAAd,CADvB,EAEE,2CAFF,EAGEA,GAHF;AAKD,GAnDgB;;AAwDjBS,2BAAyB,iCAAST,GAAT,EAAc;AACrCR,cACE,CAAC,CAACI,WAAWI,GAAX,CAAD,IAAoB,OAAOA,GAAP,KAAe,UAApC,KAAmD,CAACK,MAAMC,OAAN,CAAcN,GAAd,CADtD,EAEE,gDAFF,EAGEA,GAHF;AAKD,GA9DgB;;AAsEjBU,mBAAiB,yBAASC,KAAT,EAAgB;AAC/BnB,cACEmB,QAAQhB,eADV,EAEE,uEACA,4CAHF;AAKD,GA5EgB;;AAmFjBiB,sBAAoB,4BAASC,QAAT,EAAmB;AACrCrB,cACEqB,aAAaZ,SAAb,IAA0BY,YAAYf,aAAagB,eADrD,EAEE,mEACA,4DAHF;AAKD,GAzFgB;;AAkGjBA,mBAAiBpB,UAAU;AACzBqB,aAAS,IADgB;AAEzBC,kBAAc;AAFW,GAAV;;AAlGA,CAAnB;;AAyGAC,OAAOC,OAAP,GAAiBpB,YAAjB","sourcesContent":["/**\n * @generated SignedSource<<b68d78236d45828b3f7f7fcc740782a9>>\n *\n * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n * !! This file is a check-in of a static_upstream project!      !!\n * !!                                                            !!\n * !! You should not modify this file directly. Instead:         !!\n * !! 1) Use `fjs use-upstream` to temporarily replace this with !!\n * !!    the latest version from upstream.                       !!\n * !! 2) Make your changes, test them, etc.                      !!\n * !! 3) Use `fjs push-upstream` to copy your changes back to    !!\n * !!    static_upstream.                                        !!\n * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n *\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule mergeHelpers\n *\n * requiresPolyfills: Array.isArray\n */\n\n\"use strict\";\n\nvar invariant = require('fbjs/lib/invariant');\nvar keyMirror = require('fbjs/lib/keyMirror');\n\n/**\n * Maximum number of levels to traverse. Will catch circular structures.\n * @const\n */\nvar MAX_MERGE_DEPTH = 36;\n\n/**\n * We won't worry about edge cases like new String('x') or new Boolean(true).\n * Functions are considered terminals, and arrays are not.\n * @param {*} o The item/object/value to test.\n * @return {boolean} true iff the argument is a terminal.\n */\nvar isTerminal = function(o) {\n  return typeof o !== 'object' || o === null;\n};\n\nvar mergeHelpers = {\n\n  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,\n\n  isTerminal: isTerminal,\n\n  /**\n   * Converts null/undefined values into empty object.\n   *\n   * @param {?Object=} arg Argument to be normalized (nullable optional)\n   * @return {!Object}\n   */\n  normalizeMergeArg: function(arg) {\n    return arg === undefined || arg === null ? {} : arg;\n  },\n\n  /**\n   * If merging Arrays, a merge strategy *must* be supplied. If not, it is\n   * likely the caller's fault. If this function is ever called with anything\n   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.\n   *\n   * @param {*} one Array to merge into.\n   * @param {*} two Array to merge from.\n   */\n  checkMergeArrayArgs: function(one, two) {\n    invariant(\n      Array.isArray(one) && Array.isArray(two),\n      'Tried to merge arrays, instead got %s and %s.',\n      one,\n      two\n    );\n  },\n\n  /**\n   * @param {*} one Object to merge into.\n   * @param {*} two Object to merge from.\n   */\n  checkMergeObjectArgs: function(one, two) {\n    mergeHelpers.checkMergeObjectArg(one);\n    mergeHelpers.checkMergeObjectArg(two);\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeObjectArg: function(arg) {\n    invariant(\n      !isTerminal(arg) && !Array.isArray(arg),\n      'Tried to merge an object, instead got %s.',\n      arg\n    );\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeIntoObjectArg: function(arg) {\n    invariant(\n      (!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg),\n      'Tried to merge into an object, instead got %s.',\n      arg\n    );\n  },\n\n  /**\n   * Checks that a merge was not given a circular object or an object that had\n   * too great of depth.\n   *\n   * @param {number} Level of recursion to validate against maximum.\n   */\n  checkMergeLevel: function(level) {\n    invariant(\n      level < MAX_MERGE_DEPTH,\n      'Maximum deep merge depth exceeded. You may be attempting to merge ' +\n      'circular structures in an unsupported way.'\n    );\n  },\n\n  /**\n   * Checks that the supplied merge strategy is valid.\n   *\n   * @param {string} Array merge strategy.\n   */\n  checkArrayStrategy: function(strategy) {\n    invariant(\n      strategy === undefined || strategy in mergeHelpers.ArrayStrategies,\n      'You must provide an array strategy to deep merge functions to ' +\n      'instruct the deep merge how to resolve merging two arrays.'\n    );\n  },\n\n  /**\n   * Set of possible behaviors of merge algorithms when encountering two Arrays\n   * that must be merged together.\n   * - `clobber`: The left `Array` is ignored.\n   * - `indexByIndex`: The result is achieved by recursively deep merging at\n   *   each index. (not yet supported.)\n   */\n  ArrayStrategies: keyMirror({\n    Clobber: true,\n    IndexByIndex: true\n  })\n\n};\n\nmodule.exports = mergeHelpers;\n"]}]