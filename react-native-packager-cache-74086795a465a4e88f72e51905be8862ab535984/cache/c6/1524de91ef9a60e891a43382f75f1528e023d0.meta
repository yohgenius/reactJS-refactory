["d49574a38278294fddb358e8a2d951dd8449f83e","fb6ad33d7d7cb6106a4c4f9b996265ac067b5c36",["ColorPropType","Platform","React","prop-types","StyleSheet","Text","TouchableNativeFeedback","TouchableOpacity","View","fbjs/lib/invariant"],[64,105,138,172,212,246,293,352,392,426],{"version":3,"sources":["/firstPro/node_modules/react-native/Libraries/Components/Button.js"],"names":["ColorPropType","require","Platform","React","PropTypes","StyleSheet","Text","TouchableNativeFeedback","TouchableOpacity","View","invariant","Button","props","accessibilityLabel","color","onPress","title","disabled","testID","buttonStyles","styles","button","textStyles","text","Touchable","OS","push","backgroundColor","buttonDisabled","textDisabled","formattedTitle","toUpperCase","accessibilityTraits","Component","propTypes","string","isRequired","bool","func","defaultBlue","create","select","ios","android","elevation","borderRadius","textAlign","padding","fontSize","fontWeight","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Button\n * @flow\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst Platform = require('Platform');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TouchableNativeFeedback = require('TouchableNativeFeedback');\nconst TouchableOpacity = require('TouchableOpacity');\nconst View = require('View');\n\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * A basic button component that should render nicely on any platform. Supports\n * a minimal level of customization.\n *\n * <center><img src=\"img/buttonExample.png\"></img></center>\n *\n * If this button doesn't look right for your app, you can build your own\n * button using [TouchableOpacity](docs/touchableopacity.html)\n * or [TouchableNativeFeedback](docs/touchablenativefeedback.html).\n * For inspiration, look at the [source code for this button component](https://github.com/facebook/react-native/blob/master/Libraries/Components/Button.js).\n * Or, take a look at the [wide variety of button components built by the community](https://js.coach/react-native?search=button).\n *\n * Example usage:\n *\n * ```\n * <Button\n *   onPress={onPressLearnMore}\n *   title=\"Learn More\"\n *   color=\"#841584\"\n *   accessibilityLabel=\"Learn more about this purple button\"\n * />\n * ```\n *\n */\n\nclass Button extends React.Component {\n\n  props: {\n    title: string,\n    onPress: () => any,\n    color?: ?string,\n    accessibilityLabel?: ?string,\n    disabled?: ?boolean,\n    testID?: ?string,\n  };\n\n  static propTypes = {\n    /**\n     * Text to display inside the button\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * Text to display for blindness accessibility features\n     */\n    accessibilityLabel: PropTypes.string,\n    /**\n     * Color of the text (iOS), or background color of the button (Android)\n     */\n    color: ColorPropType,\n    /**\n     * If true, disable all interactions for this component.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * Handler to be called when the user taps the button\n     */\n    onPress: PropTypes.func.isRequired,\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n  };\n\n  render() {\n    const {\n      accessibilityLabel,\n      color,\n      onPress,\n      title,\n      disabled,\n      testID,\n    } = this.props;\n    const buttonStyles = [styles.button];\n    const textStyles = [styles.text];\n    const Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;\n    if (color && Platform.OS === 'ios') {\n      textStyles.push({color: color});\n    } else if (color) {\n      buttonStyles.push({backgroundColor: color});\n    }\n    if (disabled) {\n      buttonStyles.push(styles.buttonDisabled);\n      textStyles.push(styles.textDisabled);\n    }\n    invariant(\n      typeof title === 'string',\n      'The title prop of a Button must be a string',\n    );\n    const formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;\n    const accessibilityTraits = ['button'];\n    if (disabled) {\n      accessibilityTraits.push('disabled');\n    }\n    return (\n      <Touchable\n        accessibilityComponentType=\"button\"\n        accessibilityLabel={accessibilityLabel}\n        accessibilityTraits={accessibilityTraits}\n        testID={testID}\n        disabled={disabled}\n        onPress={onPress}>\n        <View style={buttonStyles}>\n          <Text style={textStyles} disabled={disabled}>{formattedTitle}</Text>\n        </View>\n      </Touchable>\n    );\n  }\n}\n\n// Material design blue from https://material.google.com/style/color.html#color-color-palette\nlet defaultBlue = '#2196F3';\nif (Platform.OS === 'ios') {\n  // Measured default tintColor from iOS 10\n  defaultBlue = '#0C42FD';\n}\n\nconst styles = StyleSheet.create({\n  button: Platform.select({\n    ios: {},\n    android: {\n      elevation: 4,\n      backgroundColor: defaultBlue,\n      borderRadius: 2,\n    },\n  }),\n  text: Platform.select({\n    ios: {\n      color: defaultBlue,\n      textAlign: 'center',\n      padding: 8,\n      fontSize: 18,\n    },\n    android: {\n      textAlign: 'center',\n      color: 'white',\n      padding: 8,\n      fontWeight: '500',\n    },\n  }),\n  buttonDisabled: Platform.select({\n    ios: {},\n    android: {\n      elevation: 0,\n      backgroundColor: '#dfdfdf',\n    }\n  }),\n  textDisabled: Platform.select({\n    ios: {\n      color: '#cdcdcd',\n    },\n    android: {\n      color: '#a1a1a1',\n    }\n  }),\n});\n\nmodule.exports = Button;\n"]}]