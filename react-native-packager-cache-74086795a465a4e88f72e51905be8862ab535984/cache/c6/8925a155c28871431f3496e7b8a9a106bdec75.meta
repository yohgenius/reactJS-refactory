["4c2015c50d1ab3487e22e82e4783bb1d83c85bdc","9c3320cca730339f10aaeb085cd8f8577961ab42",["Batchinator","FillRateHelper","React","ReactNative","RefreshControl","ScrollView","View","ViewabilityHelper","flattenStyle","infoLog","fbjs/lib/invariant","fbjs/lib/warning","VirtualizeUtils"],[80,125,164,200,245,289,323,364,414,453,489,534,579],{"version":3,"sources":["/firstPro/node_modules/react-native/Libraries/Lists/VirtualizedList.js"],"names":["Batchinator","require","FillRateHelper","React","ReactNative","RefreshControl","ScrollView","View","ViewabilityHelper","flattenStyle","infoLog","invariant","warning","computeWindowedRenderLimits","_usedIndexForKey","VirtualizedList","params","animated","veryLast","props","getItemCount","data","frame","_getFrameMetricsApprox","offset","length","_footerLength","_scrollMetrics","visibleLength","_scrollRef","scrollTo","horizontal","x","y","getItemLayout","index","viewOffset","viewPosition","_highestMeasuredFrameIndex","Math","max","item","getItem","itemCount","scrollToIndex","_viewabilityHelper","recordInteraction","_updateViewableItems","flashScrollIndicators","getScrollResponder","getScrollableNode","findNodeHandle","context","onScroll","__isNative","_fillRateHelper","_getFrameMetrics","_updateCellsToRenderBatcher","_updateCellsToRender","updateCellsBatchingPeriod","viewabilityConfig","state","first","initialScrollIndex","last","min","initialNumToRender","_initialScrollIndexTimeout","setTimeout","dispose","deactivateAndFlush","clearTimeout","newProps","extraData","maxToRenderPerBatch","setState","_hasDataChangedSinceEndReached","cells","stickyHeaderIndices","stickyIndicesFromProps","ItemSeparatorComponent","keyExtractor","stickyOffset","ListHeaderComponent","end","prevCellKey","ii","key","has","push","undefined","_onUpdateSeparators","e","_onCellLayout","_onCellUnmount","ref","_cellRefs","__DEV__","flatStyles","contentContainerStyle","flexWrap","ListEmptyComponent","ListFooterComponent","disableVirtualization","Set","element","isValidElement","_onLayoutHeader","spacerKey","lastInitialIndex","_pushCells","firstAfterInitial","insertedStickySpacer","size","initBlock","stickyBlock","leadSpace","trailSpace","firstSpace","_hasWarned","keys","console","warn","lastFrame","endFrame","tailSpacerLength","_onLayoutEmpty","_onLayoutFooter","ret","cloneElement","renderScrollComponent","onContentSizeChange","_onContentSizeChange","onLayout","_onLayout","_onScroll","onScrollBeginDrag","_onScrollBeginDrag","onScrollEndDrag","_onScrollEndDrag","onMomentumScrollEnd","_onMomentumScrollEnd","_captureScrollRef","scrollEventThrottle","debug","flex","_renderDebugOverlay","_scheduleCellsToRenderUpdate","computeBlankness","cellKey","layout","nativeEvent","next","_selectOffset","_selectLength","inLayout","curr","_frames","_totalCellLength","_totalCellsMeasured","_averageCellLength","_computeBlankness","normalize","contentLength","framesInLayout","windowTop","frameLast","windowLen","visTop","visLen","baseStyle","position","top","right","bottom","width","borderColor","borderWidth","map","f","left","height","backgroundColor","metrics","onEndReached","onEndReachedThreshold","distanceFromEnd","_sentEndForContentLength","velocity","hiPri","distTop","distBottom","scrollingThreshold","abort","schedule","onViewableItemsChanged","onUpdate","_createViewToken","PureComponent","defaultProps","String","onRefresh","refreshing","JSON","stringify","windowSize","forEach","updateSeparatorProps","_headerLength","dOffset","dt","timestamp","_maybeCallOnEndReached","timeStamp","layoutMeasurement","contentSize","contentOffset","perf","prevDt","activate","newState","renderAhead","isViewable","CellRenderer","separatorProps","highlighted","leadingItem","_separators","highlight","onUpdateSeparators","unhighlight","updateProps","select","onUnmount","fillRateHelper","parentProps","renderItem","separators","enabled","Component","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule VirtualizedList\n * @flow\n */\n'use strict';\n\nconst Batchinator = require('Batchinator');\nconst FillRateHelper = require('FillRateHelper');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst RefreshControl = require('RefreshControl');\nconst ScrollView = require('ScrollView');\nconst View = require('View');\nconst ViewabilityHelper = require('ViewabilityHelper');\n\nconst flattenStyle = require('flattenStyle');\nconst infoLog = require('infoLog');\nconst invariant = require('fbjs/lib/invariant');\nconst warning = require('fbjs/lib/warning');\n\nconst {computeWindowedRenderLimits} = require('VirtualizeUtils');\n\nimport type {ViewabilityConfig, ViewToken} from 'ViewabilityHelper';\n\ntype Item = any;\n\ntype renderItemType = (info: any) => ?React.Element<any>;\n\ntype RequiredProps = {\n  renderItem: renderItemType,\n  /**\n   * The default accessor functions assume this is an Array<{key: string}> but you can override\n   * getItem, getItemCount, and keyExtractor to handle any type of index-based data.\n   */\n  data?: any,\n  /**\n   * A generic accessor for extracting an item from any sort of data blob.\n   */\n  getItem: (data: any, index: number) => ?Item,\n  /**\n   * Determines how many items are in the data blob.\n   */\n  getItemCount: (data: any) => number,\n};\ntype OptionalProps = {\n  /**\n   * `debug` will turn on extra logging and visual overlays to aid with debugging both usage and\n   * implementation, but with a significant perf hit.\n   */\n  debug?: ?boolean,\n  /**\n   * DEPRECATED: Virtualization provides significant performance and memory optimizations, but fully\n   * unmounts react instances that are outside of the render window. You should only need to disable\n   * this for debugging purposes.\n   */\n  disableVirtualization: boolean,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  getItemLayout?: (data: any, index: number) =>\n    {length: number, offset: number, index: number}, // e.g. height, y\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender: number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  keyExtractor: (item: Item, index: number) => string,\n  /**\n   * Rendered when the list is empty. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListEmptyComponent?: ?(ReactClass<any> | React.Element<any>),\n  /**\n   * Rendered at the bottom of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListFooterComponent?: ?(ReactClass<any> | React.Element<any>),\n  /**\n   * Rendered at the top of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListHeaderComponent?: ?(ReactClass<any> | React.Element<any>),\n  /**\n   * The maximum number of items to render in each incremental render batch. The more rendered at\n   * once, the better the fill rate, but responsiveness my suffer because rendering content may\n   * interfere with responding to button taps or other interactions.\n   */\n  maxToRenderPerBatch: number,\n  onEndReached?: ?(info: {distanceFromEnd: number}) => void,\n  onEndReachedThreshold?: ?number, // units of visible length\n  onLayout?: ?Function,\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?Function,\n  /**\n   * Called when the viewability of rows changes, as defined by the\n   * `viewabilityConfig` prop.\n   */\n  onViewableItemsChanged?: ?(info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: ?boolean,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * Render a custom scroll component, e.g. with a differently styled `RefreshControl`.\n   */\n  renderScrollComponent: (props: Object) => React.Element<any>,\n  /**\n   * Amount of time between low-pri item render batches, e.g. for rendering items quite a ways off\n   * screen. Similar fill rate/responsiveness tradeoff as `maxToRenderPerBatch`.\n   */\n  updateCellsBatchingPeriod: number,\n  viewabilityConfig?: ViewabilityConfig,\n  /**\n   * Determines the maximum number of items rendered outside of the visible area, in units of\n   * visible lengths. So if your list fills the screen, then `windowSize={21}` (the default) will\n   * render the visible screen area plus up to 10 screens above and 10 below the viewport. Reducing\n   * this number will reduce memory consumption and may improve performance, but will increase the\n   * chance that fast scrolling may reveal momentary blank areas of unrendered content.\n   */\n  windowSize: number,\n};\n/* $FlowFixMe - this Props seems to be missing a bunch of stuff. Remove this\n * comment to see the errors */\nexport type Props = RequiredProps & OptionalProps;\n\nlet _usedIndexForKey = false;\n\ntype State = {first: number, last: number};\n\n/**\n * Base implementation for the more convenient [`<FlatList>`](/react-native/docs/flatlist.html)\n * and [`<SectionList>`](/react-native/docs/sectionlist.html) components, which are also better\n * documented. In general, this should only really be used if you need more flexibility than\n * `FlatList` provides, e.g. for use with immutable data instead of plain arrays.\n *\n * Virtualization massively improves memory consumption and performance of large lists by\n * maintaining a finite render window of active items and replacing all items outside of the render\n * window with appropriately sized blank space. The window adapts to scrolling behavior, and items\n * are rendered incrementally with low-pri (after any running interactions) if they are far from the\n * visible area, or with hi-pri otherwise to minimize the potential of seeing blank space.\n *\n * Some caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n */\nclass VirtualizedList extends React.PureComponent<OptionalProps, Props, State> {\n  props: Props;\n\n  // scrollToEnd may be janky without getItemLayout prop\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    const animated = params ? params.animated : true;\n    const veryLast = this.props.getItemCount(this.props.data) - 1;\n    const frame = this._getFrameMetricsApprox(veryLast);\n    const offset = frame.offset + frame.length + this._footerLength -\n      this._scrollMetrics.visibleLength;\n    this._scrollRef.scrollTo(\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated}\n    );\n  }\n\n  // scrollToIndex may be janky without getItemLayout prop\n  scrollToIndex(params: {\n    animated?: ?boolean, index: number, viewOffset?: number, viewPosition?: number\n  }) {\n    const {data, horizontal, getItemCount, getItemLayout} = this.props;\n    const {animated, index, viewOffset, viewPosition} = params;\n    invariant(\n      index >= 0 && index < getItemCount(data),\n      `scrollToIndex out of range: ${index} vs ${getItemCount(data) - 1}`,\n    );\n    invariant(\n      getItemLayout || index < this._highestMeasuredFrameIndex,\n      'scrollToIndex should be used in conjunction with getItemLayout, ' +\n        'otherwise there is no way to know the location of an arbitrary index.',\n    );\n    const frame = this._getFrameMetricsApprox(index);\n    const offset = Math.max(\n      0,\n      frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length),\n    ) - (viewOffset || 0);\n    this._scrollRef.scrollTo(horizontal ? {x: offset, animated} : {y: offset, animated});\n  }\n\n  // scrollToItem may be janky without getItemLayout prop. Required linear scan through items -\n  // use scrollToIndex instead if possible.\n  scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number}) {\n    const {item} = params;\n    const {data, getItem, getItemCount} = this.props;\n    const itemCount = getItemCount(data);\n    for (let index = 0; index < itemCount; index++) {\n      if (getItem(data, index) === item) {\n        this.scrollToIndex({...params, index});\n        break;\n      }\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   * \n   * Param `offset` expects the offset to scroll to.\n   * In case of `horizontal` is true, the offset is the x-value,\n   * in any other case the offset is the y-value.\n   * \n   * Param `animated` (`true` by default) defines whether the list\n   * should do an animation while scrolling.\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    const {animated, offset} = params;\n    this._scrollRef.scrollTo(\n      this.props.horizontal ? {x: offset, animated} : {y: offset, animated}\n    );\n  }\n\n  recordInteraction() {\n    this._viewabilityHelper.recordInteraction();\n    this._updateViewableItems(this.props.data);\n  }\n\n  flashScrollIndicators() {\n    this._scrollRef.flashScrollIndicators();\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   * Note that `this._scrollRef` might not be a `ScrollView`, so we\n   * need to check that it responds to `getScrollResponder` before calling it.\n   */\n  getScrollResponder() {\n    if (this._scrollRef && this._scrollRef.getScrollResponder) {\n      return this._scrollRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode() {\n    if (this._scrollRef && this._scrollRef.getScrollableNode) {\n      return this._scrollRef.getScrollableNode();\n    } else {\n      return ReactNative.findNodeHandle(this._scrollRef);\n    }\n  }\n\n  static defaultProps = {\n    disableVirtualization: false,\n    horizontal: false,\n    initialNumToRender: 10,\n    keyExtractor: (item: Item, index: number) => {\n      if (item.key != null) {\n        return item.key;\n      }\n      _usedIndexForKey = true;\n      return String(index);\n    },\n    maxToRenderPerBatch: 10,\n    onEndReachedThreshold: 2, // multiples of length\n    renderScrollComponent: (props: Props) => {\n      if (props.onRefresh) {\n        invariant(\n          typeof props.refreshing === 'boolean',\n          '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n            JSON.stringify(props.refreshing) + '`',\n        );\n        return (\n          <ScrollView\n            {...props}\n            refreshControl={\n              <RefreshControl\n                refreshing={props.refreshing}\n                onRefresh={props.onRefresh}\n              />\n            }\n          />\n        );\n      } else {\n        return <ScrollView {...props} />;\n      }\n    },\n    scrollEventThrottle: 50,\n    updateCellsBatchingPeriod: 50,\n    windowSize: 21, // multiples of length\n  };\n\n  state: State;\n\n  constructor(props: Props, context: Object) {\n    super(props, context);\n    invariant(\n      !props.onScroll || !props.onScroll.__isNative,\n      'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' +\n      'to support native onScroll events with useNativeDriver',\n    );\n\n    this._fillRateHelper = new FillRateHelper(this._getFrameMetrics);\n    this._updateCellsToRenderBatcher = new Batchinator(\n      this._updateCellsToRender,\n      this.props.updateCellsBatchingPeriod,\n    );\n    this._viewabilityHelper = new ViewabilityHelper(this.props.viewabilityConfig);\n    this.state = {\n      first: this.props.initialScrollIndex || 0,\n      last: Math.min(\n        this.props.getItemCount(this.props.data),\n        (this.props.initialScrollIndex || 0) + this.props.initialNumToRender,\n      ) - 1,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.initialScrollIndex) {\n      this._initialScrollIndexTimeout = setTimeout(\n        () => this.scrollToIndex({animated: false, index: this.props.initialScrollIndex}),\n        0,\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this._updateViewableItems(null);\n    this._updateCellsToRenderBatcher.dispose();\n    this._viewabilityHelper.dispose();\n    this._fillRateHelper.deactivateAndFlush();\n    clearTimeout(this._initialScrollIndexTimeout);\n  }\n\n  componentWillReceiveProps(newProps: Props) {\n    const {data, extraData, getItemCount, maxToRenderPerBatch} = newProps;\n    // first and last could be stale (e.g. if a new, shorter items props is passed in), so we make\n    // sure we're rendering a reasonable range here.\n    this.setState({\n      first: Math.max(0, Math.min(this.state.first, getItemCount(data) - 1 - maxToRenderPerBatch)),\n      last: Math.max(0, Math.min(this.state.last, getItemCount(data) - 1)),\n    });\n    if (data !== this.props.data || extraData !== this.props.extraData) {\n      this._hasDataChangedSinceEndReached = true;\n    }\n  }\n\n  _pushCells(\n    cells: Array<Object>,\n    stickyHeaderIndices: Array<number>,\n    stickyIndicesFromProps: Set<number>,\n    first: number,\n    last: number,\n  ) {\n    const {ItemSeparatorComponent, data, getItem, getItemCount, keyExtractor} = this.props;\n    const stickyOffset = this.props.ListHeaderComponent ? 1 : 0;\n    const end = getItemCount(data) - 1;\n    let prevCellKey;\n    last = Math.min(end, last);\n    for (let ii = first; ii <= last; ii++) {\n      const item = getItem(data, ii);\n      invariant(item, 'No item for index ' + ii);\n      const key = keyExtractor(item, ii);\n      if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n        stickyHeaderIndices.push(cells.length);\n      }\n      cells.push(\n        <CellRenderer\n          ItemSeparatorComponent={ii < end ? ItemSeparatorComponent : undefined}\n          cellKey={key}\n          fillRateHelper={this._fillRateHelper}\n          index={ii}\n          item={item}\n          key={key}\n          prevCellKey={prevCellKey}\n          onUpdateSeparators={this._onUpdateSeparators}\n          onLayout={(e) => this._onCellLayout(e, key, ii)}\n          onUnmount={this._onCellUnmount}\n          parentProps={this.props}\n          ref={(ref) => {this._cellRefs[key] = ref;}}\n        />\n      );\n      prevCellKey = key;\n    }\n  }\n\n  _onUpdateSeparators = (keys: Array<?string>, newProps: Object) => {\n    keys.forEach((key) => {\n      const ref = key != null && this._cellRefs[key];\n      ref && ref.updateSeparatorProps(newProps);\n    });\n  };\n\n  render() {\n    if (__DEV__) {\n      const flatStyles = flattenStyle(this.props.contentContainerStyle);\n      warning(\n        flatStyles == null || flatStyles.flexWrap !== 'wrap',\n        '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' +\n          'Consider using `numColumns` with `FlatList` instead.',\n      );\n    }\n\n    const {ListEmptyComponent, ListFooterComponent, ListHeaderComponent} = this.props;\n    const {data, disableVirtualization, horizontal} = this.props;\n    const cells = [];\n    const stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);\n    const stickyHeaderIndices = [];\n    if (ListHeaderComponent) {\n      const element = React.isValidElement(ListHeaderComponent)\n        ? ListHeaderComponent // $FlowFixMe\n        : <ListHeaderComponent />;\n      cells.push(\n        <View key=\"$header\" onLayout={this._onLayoutHeader}>\n          {element}\n        </View>\n      );\n    }\n    const itemCount = this.props.getItemCount(data);\n    if (itemCount > 0) {\n      _usedIndexForKey = false;\n      const spacerKey = !horizontal ? 'height' : 'width';\n      const lastInitialIndex = this.props.initialScrollIndex\n        ? -1\n        : this.props.initialNumToRender - 1;\n      const {first, last} = this.state;\n      this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex);\n      const firstAfterInitial = Math.max(lastInitialIndex + 1, first);\n      if (!disableVirtualization && first > lastInitialIndex + 1) {\n        let insertedStickySpacer = false;\n        if (stickyIndicesFromProps.size > 0) {\n          const stickyOffset = ListHeaderComponent ? 1 : 0;\n          // See if there are any sticky headers in the virtualized space that we need to render.\n          for (let ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {\n            if (stickyIndicesFromProps.has(ii + stickyOffset)) {\n              const initBlock = this._getFrameMetricsApprox(lastInitialIndex);\n              const stickyBlock = this._getFrameMetricsApprox(ii);\n              const leadSpace = stickyBlock.offset - (initBlock.offset + initBlock.length);\n              cells.push(\n                <View key=\"$sticky_lead\" style={{[spacerKey]: leadSpace}} />\n              );\n              this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii);\n              const trailSpace = this._getFrameMetricsApprox(first).offset -\n                (stickyBlock.offset + stickyBlock.length);\n              cells.push(\n                <View key=\"$sticky_trail\" style={{[spacerKey]: trailSpace}} />\n              );\n              insertedStickySpacer = true;\n              break;\n            }\n          }\n        }\n        if (!insertedStickySpacer) {\n          const initBlock = this._getFrameMetricsApprox(lastInitialIndex);\n          const firstSpace = this._getFrameMetricsApprox(first).offset -\n            (initBlock.offset + initBlock.length);\n          cells.push(\n            <View key=\"$lead_spacer\" style={{[spacerKey]: firstSpace}} />\n          );\n        }\n      }\n      this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, last);\n      if (!this._hasWarned.keys && _usedIndexForKey) {\n        console.warn(\n          'VirtualizedList: missing keys for items, make sure to specify a key property on each ' +\n          'item or provide a custom keyExtractor.'\n        );\n        this._hasWarned.keys = true;\n      }\n      if (!disableVirtualization && last < itemCount - 1) {\n        const lastFrame = this._getFrameMetricsApprox(last);\n        // Without getItemLayout, we limit our tail spacer to the _highestMeasuredFrameIndex to\n        // prevent the user for hyperscrolling into un-measured area because otherwise content will\n        // likely jump around as it renders in above the viewport.\n        const end = this.props.getItemLayout ?\n          itemCount - 1 :\n          Math.min(itemCount - 1, this._highestMeasuredFrameIndex);\n        const endFrame = this._getFrameMetricsApprox(end);\n        const tailSpacerLength =\n          (endFrame.offset + endFrame.length) -\n          (lastFrame.offset + lastFrame.length);\n        cells.push(\n          <View key=\"$tail_spacer\" style={{[spacerKey]: tailSpacerLength}} />\n        );\n      }\n    } else if (ListEmptyComponent) {\n      const element = React.isValidElement(ListEmptyComponent)\n        ? ListEmptyComponent // $FlowFixMe\n        : <ListEmptyComponent />;\n      cells.push(\n        <View key=\"$empty\" onLayout={this._onLayoutEmpty}>\n          {element}\n        </View>\n      );\n    }\n    if (ListFooterComponent) {\n      const element = React.isValidElement(ListFooterComponent)\n        ? ListFooterComponent // $FlowFixMe\n        : <ListFooterComponent />;\n      cells.push(\n        <View key=\"$footer\" onLayout={this._onLayoutFooter}>\n          {element}\n        </View>\n      );\n    }\n    const ret = React.cloneElement(\n      this.props.renderScrollComponent(this.props),\n      {\n        onContentSizeChange: this._onContentSizeChange,\n        onLayout: this._onLayout,\n        onScroll: this._onScroll,\n        onScrollBeginDrag: this._onScrollBeginDrag,\n        onScrollEndDrag: this._onScrollEndDrag,\n        onMomentumScrollEnd: this._onMomentumScrollEnd,\n        ref: this._captureScrollRef,\n        scrollEventThrottle: this.props.scrollEventThrottle, // TODO: Android support\n        stickyHeaderIndices,\n      },\n      cells,\n    );\n    if (this.props.debug) {\n      return <View style={{flex: 1}}>{ret}{this._renderDebugOverlay()}</View>;\n    } else {\n      return ret;\n    }\n  }\n\n  componentDidUpdate() {\n    this._scheduleCellsToRenderUpdate();\n  }\n\n  _averageCellLength = 0;\n  _cellRefs = {};\n  _hasDataChangedSinceEndReached = true;\n  _hasWarned = {};\n  _highestMeasuredFrameIndex = 0;\n  _headerLength = 0;\n  _initialScrollIndexTimeout = 0;\n  _fillRateHelper: FillRateHelper;\n  _frames = {};\n  _footerLength = 0;\n  _scrollMetrics = {\n    contentLength: 0, dOffset: 0, dt: 10, offset: 0, timestamp: 0, velocity: 0, visibleLength: 0,\n  };\n  _scrollRef = (null: any);\n  _sentEndForContentLength = 0;\n  _totalCellLength = 0;\n  _totalCellsMeasured = 0;\n  _updateCellsToRenderBatcher: Batchinator;\n  _viewabilityHelper: ViewabilityHelper;\n\n  _captureScrollRef = (ref) => {\n    this._scrollRef = ref;\n  };\n\n  _computeBlankness() {\n    this._fillRateHelper.computeBlankness(\n      this.props,\n      this.state,\n      this._scrollMetrics,\n    );\n  }\n\n  _onCellLayout(e, cellKey, index) {\n    const layout = e.nativeEvent.layout;\n    const next = {\n      offset: this._selectOffset(layout),\n      length: this._selectLength(layout),\n      index,\n      inLayout: true,\n    };\n    const curr = this._frames[cellKey];\n    if (!curr ||\n      next.offset !== curr.offset ||\n      next.length !== curr.length ||\n      index !== curr.index\n    ) {\n      this._totalCellLength += next.length - (curr ? curr.length : 0);\n      this._totalCellsMeasured += (curr ? 0 : 1);\n      this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;\n      this._frames[cellKey] = next;\n      this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);\n      this._scheduleCellsToRenderUpdate();\n    } else {\n      this._frames[cellKey].inLayout = true;\n    }\n    this._computeBlankness();\n  }\n\n  _onCellUnmount = (cellKey: string) => {\n    const curr = this._frames[cellKey];\n    if (curr) {\n      this._frames[cellKey] = {...curr, inLayout: false};\n    }\n  };\n\n  _onLayout = (e: Object) => {\n    this._scrollMetrics.visibleLength = this._selectLength(e.nativeEvent.layout);\n    this.props.onLayout && this.props.onLayout(e);\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEndReached();\n  };\n\n  _onLayoutEmpty = (e) => {\n    this.props.onLayout && this.props.onLayout(e);\n  };\n\n  _onLayoutFooter = (e) => {\n    this._footerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  _onLayoutHeader = (e) => {\n    this._headerLength = this._selectLength(e.nativeEvent.layout);\n  };\n\n  _renderDebugOverlay() {\n    const normalize = this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;\n    const framesInLayout = [];\n    const itemCount = this.props.getItemCount(this.props.data);\n    for (let ii = 0; ii < itemCount; ii++) {\n      const frame = this._getFrameMetricsApprox(ii);\n      if (frame.inLayout) {\n        framesInLayout.push(frame);\n      }\n    }\n    const windowTop = this._getFrameMetricsApprox(this.state.first).offset;\n    const frameLast = this._getFrameMetricsApprox(this.state.last);\n    const windowLen = frameLast.offset + frameLast.length - windowTop;\n    const visTop = this._scrollMetrics.offset;\n    const visLen = this._scrollMetrics.visibleLength;\n    const baseStyle = {position: 'absolute', top: 0, right: 0};\n    return (\n      <View style={{...baseStyle, bottom: 0, width: 20, borderColor: 'blue', borderWidth: 1}}>\n        {framesInLayout.map((f, ii) =>\n          <View key={'f' + ii} style={{\n            ...baseStyle,\n            left: 0,\n            top: f.offset * normalize,\n            height: f.length * normalize,\n            backgroundColor: 'orange',\n          }} />\n        )}\n        <View style={{\n          ...baseStyle,\n          left: 0,\n          top: windowTop * normalize,\n          height: windowLen * normalize,\n          borderColor: 'green',\n          borderWidth: 2,\n        }} />\n        <View style={{\n          ...baseStyle,\n          left: 0,\n          top: visTop * normalize,\n          height: visLen * normalize,\n          borderColor: 'red',\n          borderWidth: 2,\n        }} />\n      </View>\n    );\n  }\n\n  _selectLength(metrics: {height: number, width: number}): number {\n    return !this.props.horizontal ? metrics.height : metrics.width;\n  }\n\n  _selectOffset(metrics: {x: number, y: number}): number {\n    return !this.props.horizontal ? metrics.y : metrics.x;\n  }\n\n  _maybeCallOnEndReached() {\n    const {data, getItemCount, onEndReached, onEndReachedThreshold} = this.props;\n    const {contentLength, visibleLength, offset} = this._scrollMetrics;\n    const distanceFromEnd = contentLength - visibleLength - offset;\n    if (onEndReached &&\n        this.state.last === getItemCount(data) - 1 &&\n        distanceFromEnd < onEndReachedThreshold * visibleLength &&\n        (this._hasDataChangedSinceEndReached ||\n         this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {\n      // Only call onEndReached once for a given dataset + content length.\n      this._hasDataChangedSinceEndReached = false;\n      this._sentEndForContentLength = this._scrollMetrics.contentLength;\n      onEndReached({distanceFromEnd});\n    }\n  }\n\n  _onContentSizeChange = (width: number, height: number) => {\n    if (this.props.onContentSizeChange) {\n      this.props.onContentSizeChange(width, height);\n    }\n    this._scrollMetrics.contentLength = this._selectLength({height, width});\n    this._scheduleCellsToRenderUpdate();\n    this._maybeCallOnEndReached();\n  };\n\n  _onScroll = (e: Object) => {\n    if (this.props.onScroll) {\n      this.props.onScroll(e);\n    }\n    const timestamp = e.timeStamp;\n    const visibleLength = this._selectLength(e.nativeEvent.layoutMeasurement);\n    const contentLength = this._selectLength(e.nativeEvent.contentSize);\n    const offset = this._selectOffset(e.nativeEvent.contentOffset);\n    const dt = Math.max(1, timestamp - this._scrollMetrics.timestamp);\n    if (dt > 500 && this._scrollMetrics.dt > 500 && (contentLength > (5 * visibleLength)) &&\n        !this._hasWarned.perf) {\n      infoLog(\n        'VirtualizedList: You have a large list that is slow to update - make sure your ' +\n        'renderItem function renders components that follow React performance best practices ' +\n        'like PureComponent, shouldComponentUpdate, etc.',\n        {dt, prevDt: this._scrollMetrics.dt, contentLength},\n      );\n      this._hasWarned.perf = true;\n    }\n    const dOffset = offset - this._scrollMetrics.offset;\n    const velocity = dOffset / dt;\n    this._scrollMetrics = {contentLength, dt, dOffset, offset, timestamp, velocity, visibleLength};\n    this._updateViewableItems(this.props.data);\n    if (!this.props) {\n      return;\n    }\n    this._maybeCallOnEndReached();\n    if (velocity !== 0) {\n      this._fillRateHelper.activate();\n    }\n    this._computeBlankness();\n    this._scheduleCellsToRenderUpdate();\n  };\n\n  _scheduleCellsToRenderUpdate() {\n    const {first, last} = this.state;\n    const {offset, visibleLength, velocity} = this._scrollMetrics;\n    const itemCount = this.props.getItemCount(this.props.data);\n    let hiPri = false;\n    if (first > 0 || last < itemCount - 1) {\n      const distTop = offset - this._getFrameMetricsApprox(first).offset;\n      const distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);\n      const scrollingThreshold = this.props.onEndReachedThreshold * visibleLength / 2;\n      hiPri = (\n        Math.min(distTop, distBottom) < 0 ||\n        (velocity < -2 && distTop < scrollingThreshold) ||\n        (velocity > 2 && distBottom < scrollingThreshold)\n      );\n    }\n    if (hiPri) {\n      // Don't worry about interactions when scrolling quickly; focus on filling content as fast\n      // as possible.\n      this._updateCellsToRenderBatcher.dispose({abort: true});\n      this._updateCellsToRender();\n      return;\n    } else {\n      this._updateCellsToRenderBatcher.schedule();\n    }\n  }\n\n  _onScrollBeginDrag = (e): void => {\n    this._viewabilityHelper.recordInteraction();\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  };\n\n  _onScrollEndDrag = (e): void => {\n    const {velocity} = e.nativeEvent;\n    if (velocity) {\n      this._scrollMetrics.velocity = this._selectOffset(velocity);\n    }\n    this._computeBlankness();\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  };\n\n  _onMomentumScrollEnd = (e): void => {\n    this._scrollMetrics.velocity = 0;\n    this._computeBlankness();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  };\n\n  _updateCellsToRender = () => {\n    const {data, disableVirtualization, getItemCount, onEndReachedThreshold} = this.props;\n    this._updateViewableItems(data);\n    if (!data) {\n      return;\n    }\n    this.setState((state) => {\n      let newState;\n      if (!disableVirtualization) {\n        newState = computeWindowedRenderLimits(\n          this.props, state, this._getFrameMetricsApprox, this._scrollMetrics,\n        );\n      } else {\n        const {contentLength, offset, visibleLength} = this._scrollMetrics;\n        const distanceFromEnd = contentLength - visibleLength - offset;\n        const renderAhead = distanceFromEnd < onEndReachedThreshold * visibleLength ?\n          this.props.maxToRenderPerBatch : 0;\n        newState = {\n          first: 0,\n          last: Math.min(state.last + renderAhead, getItemCount(data) - 1),\n        };\n      }\n      return newState;\n    });\n  };\n\n  _createViewToken = (index: number, isViewable: boolean) => {\n    const {data, getItem, keyExtractor} = this.props;\n    const item = getItem(data, index);\n    invariant(item, 'Missing item for index ' + index);\n    return {index, item, key: keyExtractor(item, index), isViewable};\n  };\n\n  _getFrameMetricsApprox = (index: number): {length: number, offset: number} => {\n    const frame = this._getFrameMetrics(index);\n    if (frame && frame.index === index) { // check for invalid frames due to row re-ordering\n      return frame;\n    } else {\n      const {getItemLayout} = this.props;\n      invariant(\n        !getItemLayout,\n        'Should not have to estimate frames when a measurement metrics function is provided'\n      );\n      return {\n        length: this._averageCellLength,\n        offset: this._averageCellLength * index,\n      };\n    }\n  };\n\n  _getFrameMetrics = (index: number): ?{\n    length: number, offset: number, index: number, inLayout?: boolean,\n  } => {\n    const {data, getItem, getItemCount, getItemLayout, keyExtractor} = this.props;\n    invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);\n    const item = getItem(data, index);\n    let frame = item && this._frames[keyExtractor(item, index)];\n    if (!frame || frame.index !== index) {\n      if (getItemLayout) {\n        frame = getItemLayout(data, index);\n      }\n    }\n    return frame;\n  };\n\n  _updateViewableItems(data: any) {\n    const {getItemCount, onViewableItemsChanged} = this.props;\n    if (!onViewableItemsChanged) {\n      return;\n    }\n    this._viewabilityHelper.onUpdate(\n      getItemCount(data),\n      this._scrollMetrics.offset,\n      this._scrollMetrics.visibleLength,\n      this._getFrameMetrics,\n      this._createViewToken,\n      onViewableItemsChanged,\n      this.state,\n    );\n  }\n}\n\nclass CellRenderer extends React.Component {\n  props: {\n    ItemSeparatorComponent: ?ReactClass<*>,\n    cellKey: string,\n    fillRateHelper: FillRateHelper,\n    index: number,\n    item: Item,\n    onLayout: (event: Object) => void, // This is extracted by ScrollViewStickyHeader\n    onUnmount: (cellKey: string) => void,\n    onUpdateSeparators: (cellKeys: Array<?string>, props: Object) => void,\n    parentProps: {\n      getItemLayout?: ?Function,\n      renderItem: renderItemType,\n    },\n    prevCellKey: ?string,\n  };\n\n  state = {\n    separatorProps: {\n      highlighted: false,\n      leadingItem: this.props.item,\n    },\n  };\n\n  // TODO: consider factoring separator stuff out of VirtualizedList into FlatList since it's not\n  // reused by SectionList and we can keep VirtualizedList simpler.\n  _separators = {\n    highlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {highlighted: true});\n    },\n    unhighlight: () => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([cellKey, prevCellKey], {highlighted: false});\n    },\n    updateProps: (select: 'leading' | 'trailing', newProps: Object) => {\n      const {cellKey, prevCellKey} = this.props;\n      this.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);\n    },\n  };\n\n  updateSeparatorProps(newProps: Object) {\n    this.setState(state => ({separatorProps: {...state.separatorProps, ...newProps}}));\n  }\n\n  componentWillUnmount() {\n    this.props.onUnmount(this.props.cellKey);\n  }\n\n  render() {\n    const {ItemSeparatorComponent, fillRateHelper, item, index, parentProps} = this.props;\n    const {renderItem, getItemLayout} = parentProps;\n    invariant(renderItem, 'no renderItem!');\n    const element = renderItem({\n      item,\n      index,\n      separators: this._separators,\n    });\n    const onLayout = (getItemLayout && !parentProps.debug && !fillRateHelper.enabled())\n      ? undefined\n      : this.props.onLayout;\n    // NOTE: that when this is a sticky header, `onLayout` will get automatically extracted and\n    // called explicitly by `ScrollViewStickyHeader`.\n    return (\n      <View onLayout={onLayout}>\n        {element}\n        {ItemSeparatorComponent && <ItemSeparatorComponent {...this.state.separatorProps} />}\n      </View>\n    );\n  }\n}\n\nmodule.exports = VirtualizedList;\n"]}]