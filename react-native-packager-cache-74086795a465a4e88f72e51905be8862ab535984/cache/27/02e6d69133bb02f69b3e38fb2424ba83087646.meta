["2679eaf590734a14c3dfe9a192c111695dbd3ba7","85e04bfc04975fe05618f943e92f25d5bd4acb7c",["NativeMethodsMixin","NativeModules","Platform","prop-types","React","ReactNativeFeatureFlags","ReactNativeStyleAttributes","ReactNativeViewAttributes","ViewPropTypes","create-react-class","fbjs/lib/invariant","requireNativeComponent","fbjs/lib/warning","ViewAccessibility","UIManager"],[49,100,141,178,213,261,330,401,459,509,556,616,665,710,3516],{"version":3,"sources":["/firstPro/node_modules/react-native/Libraries/Components/View/View.js"],"names":["NativeMethodsMixin","require","NativeModules","Platform","PropTypes","React","ReactNativeFeatureFlags","ReactNativeStyleAttributes","ReactNativeViewAttributes","ViewPropTypes","createReactClass","invariant","requireNativeComponent","warning","AccessibilityComponentTypes","AccessibilityTraits","forceTouchAvailable","PlatformConstants","View","displayName","mixins","propTypes","statics","__propTypesSecretDontUseThesePlease","viewConfig","uiViewClassName","validAttributes","RCTView","contextTypes","isInAParentText","bool","render","context","OS","props","mixinStatics","target","warnedAboutAccessibilityTraits","warnedAboutAccessibilityComponentType","warnedAboutForceTouchAvailable","warnedAboutPropTypes","Object","defineProperty","get","nativeOnly","nativeBackgroundAndroid","nativeForegroundAndroid","__DEV__","UIManager","viewConfigs","prop","nativeProps","viewAny","Error","ViewToExport","useFiber","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule View\n * @flow\n */\n'use strict';\n\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst NativeModules = require('NativeModules');\nconst Platform = require('Platform');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst ReactNativeFeatureFlags = require('ReactNativeFeatureFlags');\nconst ReactNativeStyleAttributes = require('ReactNativeStyleAttributes');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst createReactClass = require('create-react-class');\nconst invariant = require('fbjs/lib/invariant');\nconst requireNativeComponent = require('requireNativeComponent');\nconst warning = require('fbjs/lib/warning');\n\nconst {\n  AccessibilityComponentTypes,\n  AccessibilityTraits,\n} = require('ViewAccessibility');\n\nconst forceTouchAvailable = (NativeModules.PlatformConstants &&\n  NativeModules.PlatformConstants.forceTouchAvailable) || false;\n\nimport type {ViewProps} from 'ViewPropTypes';\n\nexport type Props = ViewProps;\n\n/**\n * The most fundamental component for building a UI, `View` is a container that supports layout with\n * [flexbox](docs/flexbox.html), [style](docs/style.html),\n * [some touch handling](docs/handling-touches.html), and\n * [accessibility](docs/accessibility.html) controls. `View` maps directly to the\n * native view equivalent on whatever platform React Native is running on, whether that is a\n * `UIView`, `<div>`, `android.view`, etc.\n *\n * `View` is designed to be nested inside other views and can have 0 to many children of any type.\n *\n * This example creates a `View` that wraps two colored boxes and a text component in a row with\n * padding.\n *\n * ```javascript\n * class ViewColoredBoxesWithText extends Component {\n *   render() {\n *     return (\n *       <View style={{flexDirection: 'row', height: 100, padding: 20}}>\n *         <View style={{backgroundColor: 'blue', flex: 0.3}} />\n *         <View style={{backgroundColor: 'red', flex: 0.5}} />\n *         <Text>Hello World!</Text>\n *       </View>\n *     );\n *   }\n * }\n * ```\n *\n * > `View`s are designed to be used with [`StyleSheet`](docs/style.html) for clarity\n * > and performance, although inline styles are also supported.\n *\n * ### Synthetic Touch Events\n *\n * For `View` responder props (e.g., `onResponderMove`), the synthetic touch event passed to them\n * are of the following form:\n *\n * - `nativeEvent`\n *   - `changedTouches` - Array of all touch events that have changed since the last event.\n *   - `identifier` - The ID of the touch.\n *   - `locationX` - The X position of the touch, relative to the element.\n *   - `locationY` - The Y position of the touch, relative to the element.\n *   - `pageX` - The X position of the touch, relative to the root element.\n *   - `pageY` - The Y position of the touch, relative to the root element.\n *   - `target` - The node id of the element receiving the touch event.\n *   - `timestamp` - A time identifier for the touch, useful for velocity calculation.\n *   - `touches` - Array of all current touches on the screen.\n */\n// $FlowFixMe(>=0.41.0)\nconst View = createReactClass({\n  displayName: 'View',\n  // TODO: We should probably expose the mixins, viewConfig, and statics publicly. For example,\n  // one of the props is of type AccessibilityComponentType. That is defined as a const[] above,\n  // but it is not rendered by the docs, since `statics` below is not rendered. So its Possible\n  // values had to be hardcoded.\n  mixins: [NativeMethodsMixin],\n\n  // `propTypes` should not be accessed directly on View since this wrapper only\n  // exists for DEV mode. However it's important for them to be declared.\n  // If the object passed to `createClass` specifies `propTypes`, Flow will\n  // create a static type from it. This property will be over-written below with\n  // a warn-on-use getter though.\n  // TODO (bvaughn) Remove the warn-on-use comment after April 1.\n  propTypes: ViewPropTypes,\n\n  // ReactElementValidator will (temporarily) use this private accessor when\n  // detected to avoid triggering the warning message.\n  // TODO (bvaughn) Remove this after April 1 ReactNative RC is tagged.\n  statics: {\n    __propTypesSecretDontUseThesePlease: ViewPropTypes\n  },\n\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  viewConfig: {\n    uiViewClassName: 'RCTView',\n    validAttributes: ReactNativeViewAttributes.RCTView\n  },\n\n  contextTypes: {\n    isInAParentText: PropTypes.bool,\n  },\n\n  render: function() {\n    invariant(\n      !(this.context.isInAParentText && Platform.OS === 'android'),\n      'Nesting of <View> within <Text> is not supported on Android.');\n\n    // WARNING: This method will not be used in production mode as in that mode we\n    // replace wrapper component View with generated native wrapper RCTView. Avoid\n    // adding functionality this component that you'd want to be available in both\n    // dev and prod modes.\n    return <RCTView {...this.props} />;\n  },\n});\n\n// Warn about unsupported use of View static properties as these will no longer\n// be supported with React fiber. This warning message will go away in the next\n// ReactNative release. Use defineProperty() rather than createClass() statics\n// because the mixin process auto-triggers the 1-time warning message.\n// TODO (bvaughn) Remove this after April 1 ReactNative RC is tagged.\nfunction mixinStatics (target) {\n  let warnedAboutAccessibilityTraits = false;\n  let warnedAboutAccessibilityComponentType = false;\n  let warnedAboutForceTouchAvailable = false;\n  let warnedAboutPropTypes = false;\n\n  // $FlowFixMe https://github.com/facebook/flow/issues/285\n  Object.defineProperty(target, 'AccessibilityTraits', {\n    get: function() {\n      warning(\n        warnedAboutAccessibilityTraits,\n        'View.AccessibilityTraits has been deprecated and will be ' +\n        'removed in a future version of ReactNative. Use ' +\n        'ViewAccessibility.AccessibilityTraits instead.'\n      );\n      warnedAboutAccessibilityTraits = true;\n      return AccessibilityTraits;\n    }\n  });\n  // $FlowFixMe https://github.com/facebook/flow/issues/285\n  Object.defineProperty(target, 'AccessibilityComponentType', {\n    get: function() {\n      warning(\n        warnedAboutAccessibilityComponentType,\n        'View.AccessibilityComponentType has been deprecated and will be ' +\n        'removed in a future version of ReactNative. Use ' +\n        'ViewAccessibility.AccessibilityComponentTypes instead.'\n      );\n      warnedAboutAccessibilityComponentType = true;\n      return AccessibilityComponentTypes;\n    }\n  });\n  // $FlowFixMe https://github.com/facebook/flow/issues/285\n  Object.defineProperty(target, 'forceTouchAvailable', {\n    get: function() {\n      warning(\n        warnedAboutForceTouchAvailable,\n        'View.forceTouchAvailable has been deprecated and will be removed ' +\n        'in a future version of ReactNative. Use ' +\n        'NativeModules.PlatformConstants.forceTouchAvailable instead.'\n      );\n      warnedAboutForceTouchAvailable = true;\n      return forceTouchAvailable;\n    }\n  });\n  // $FlowFixMe https://github.com/facebook/flow/issues/285\n  Object.defineProperty(target, 'propTypes', {\n    get: function() {\n      warning(\n        warnedAboutPropTypes,\n        'View.propTypes has been deprecated and will be removed in a future ' +\n        'version of ReactNative. Use ViewPropTypes instead.'\n      );\n      warnedAboutPropTypes = true;\n      return ViewPropTypes;\n    }\n  });\n}\n\nconst RCTView = requireNativeComponent('RCTView', View, {\n  nativeOnly: {\n    nativeBackgroundAndroid: true,\n    nativeForegroundAndroid: true,\n  }\n});\n\nif (__DEV__) {\n  const UIManager = require('UIManager');\n  const viewConfig = UIManager.viewConfigs && UIManager.viewConfigs.RCTView || {};\n  for (const prop in viewConfig.nativeProps) {\n    const viewAny: any = View; // Appease flow\n    if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {\n      throw new Error(\n        'View is missing propType for native prop `' + prop + '`'\n      );\n    }\n  }\n}\n\n// TODO (bvaughn) Remove feature flags once all static View accessors are gone.\n// We temporarily wrap fiber native views with the create-class View above,\n// Because external code sometimes accesses static properties of this view.\nlet ViewToExport = RCTView;\nif (\n  __DEV__ ||\n  ReactNativeFeatureFlags.useFiber\n) {\n  mixinStatics(View);\n  ViewToExport = View;\n} else {\n  // TODO (bvaughn) Remove this mixin once all static View accessors are gone.\n  mixinStatics((RCTView : any));\n}\n\n// TODO (bvaughn) Temporarily mask Flow warnings for View property accesses.\n// We're wrapping the string type (Fiber) for now to avoid any actual problems.\nmodule.exports = ((ViewToExport : any) : typeof View);\n"]}]