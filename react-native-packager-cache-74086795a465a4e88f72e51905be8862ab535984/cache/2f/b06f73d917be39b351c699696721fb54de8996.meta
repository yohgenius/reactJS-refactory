["84bb9867208852fc1c4736c1430e6aa313d45625","fe95f6e503dcfa80298b092da83e0088d7361943",["react","prop-types","react-native","./AV"],[342,437,547,583],{"version":3,"sources":["/firstPro/node_modules/expo/src/Video.js"],"names":["IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","_STYLES","create","base","overflow","poster","position","left","top","right","bottom","resizeMode","Video","props","_assignRoot","component","_root","_handleNewStatus","status","state","showPoster","isLoaded","isPlaying","positionMillis","setState","callback","_performOperationAndHandleStatusAsync","operation","Error","_setIOSFullscreen","value","OS","tag","ExponentVideoManager","setFullscreen","presentIOSFullscreenPlayer","dismissIOSFullscreenPlayer","getStatusAsync","ExponentAV","getStatusForVideo","setCallback","setNativeProps","loadAsync","source","initialStatus","downloadFirst","uri","fullInitialStatus","loadForVideo","unloadAsync","unloadForVideo","setStatusAsync","setStatusForVideo","_nativeCallback","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onIOSFullscreenUpdate","usePoster","nativeProps","nativeResizeMode","UIManager","ExponentVideo","Constants","ScaleNone","RESIZE_MODE_STRETCH","ScaleToFill","RESIZE_MODE_CONTAIN","ScaleAspectFit","RESIZE_MODE_COVER","ScaleAspectFill","forEach","prop","style","onStatusUpdateNative","onLoadStartNative","onLoadNative","onErrorNative","onReadyForDisplayNative","onFullscreenUpdateNative","posterSource","prototype","propTypes","oneOfType","shape","string","number","func","useNativeControls","bool","progressUpdateIntervalMillis","shouldPlay","rate","shouldCorrectPitch","volume","isMuted","isLooping","scaleX","scaleY","translateX","translateY","rotation","nativeOnly"],"mappings":"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","sourcesContent":["// @flow\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Image,\n  findNodeHandle,\n  NativeModules,\n  Platform,\n  requireNativeComponent,\n  StyleSheet,\n  View,\n  ViewPropTypes,\n} from 'react-native';\n\nimport {\n  _COMMON_AV_PLAYBACK_METHODS,\n  _getURIFromSource,\n  _getURIAndFullInitialStatusForLoadAsync,\n  _throwErrorIfValuesOutOfBoundsInStatus,\n  _getUnloadedStatus,\n  type PlaybackSource,\n  type PlaybackStatus,\n  type PlaybackStatusToSet,\n} from './AV';\n\nexport type NaturalSize = {\n  width: number,\n  height: number,\n  orientation: 'portrait' | 'landscape',\n};\n\ntype ResizeMode = 'contain' | 'cover' | 'stretch';\n\ntype ReadyForDisplayEvent = {\n  naturalSize: NaturalSize,\n  status: PlaybackStatus,\n};\n\ntype FullscreenUpdateEvent = {\n  fullscreenUpdate: 0 | 1 | 2 | 3,\n  status: PlaybackStatus,\n};\n\n// TODO extend the Props type from Component\ntype Props = {\n  // Source stuff\n  source?: PlaybackSource, // { uri: 'http://foo/bar.mp4' }, Asset, or require('./foo/bar.mp4')\n  posterSource?: { uri: string } | number, // { uri: 'http://foo/bar.mp4' } or require('./foo/bar.mp4')\n\n  // Callbacks\n  callback?: (status: PlaybackStatus) => void, // TODO for consistency should this also be \"event\" encapsulated? What about with Audio? Should we call this onStatusUpdate?\n  onLoadStart?: () => void,\n  onLoad?: (status: PlaybackStatus) => void,\n  onError?: (error: string) => void,\n  onReadyForDisplay?: (event: ReadyForDisplayEvent) => void,\n  onIOSFullscreenUpdate?: (event: FullscreenUpdateEvent) => void,\n\n  // UI stuff\n  useNativeControls?: boolean,\n  resizeMode?: ResizeMode,\n  usePoster?: boolean,\n\n  // Playback API\n  status?: PlaybackStatusToSet,\n  progressUpdateIntervalMillis?: number,\n  positionMillis?: number,\n  shouldPlay?: boolean,\n  rate?: number,\n  shouldCorrectPitch?: boolean,\n  volume?: number,\n  isMuted?: boolean,\n  isLooping?: boolean,\n\n  // Required by react-native\n  scaleX?: number,\n  scaleY?: number,\n  translateX?: number,\n  translateY?: number,\n  rotation?: number,\n\n  // plus View props\n};\n\ntype NativeProps = {\n  uri?: ?string,\n  nativeResizeMode?: Object,\n  status?: PlaybackStatusToSet,\n  onStatusUpdateNative?: (event: Object) => void,\n  onReadyForDisplayNative?: (event: Object) => void,\n  onFullscreenUpdateNative?: (event: Object) => void,\n  useNativeControls?: boolean,\n\n  // plus View props\n  style?: Object,\n  // etc...\n};\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n});\n\nexport default class Video extends Component {\n  static RESIZE_MODE_CONTAIN = 'contain';\n  static RESIZE_MODE_COVER = 'cover';\n  static RESIZE_MODE_STRETCH = 'stretch';\n\n  state: {\n    showPoster: boolean,\n  };\n  props: Props;\n  _root: ExponentVideo;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      showPoster: props.usePoster != null && props.usePoster,\n    };\n  }\n\n  setNativeProps(nativeProps: NativeProps) {\n    this._root.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _assignRoot = (component: ExponentVideo) => {\n    this._root = component;\n  };\n\n  _handleNewStatus = (status: PlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.callback) {\n      this.props.callback(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<PlaybackStatus>\n  ): Promise<PlaybackStatus> => {\n    if (this._root) {\n      const status: PlaybackStatus = await operation(\n        findNodeHandle(this._root)\n      );\n      this._handleNewStatus(status);\n      return status;\n    } else {\n      throw new Error(\n        'Cannot complete operation because the Video component has not yet loaded.'\n      );\n    }\n  };\n\n  // ### iOS Fullscreening API ###\n\n  _setIOSFullscreen = async (value: boolean) => {\n    if (Platform.OS !== 'ios') {\n      throw new Error('Cannot call fullscreen method if the OS is not iOS!');\n    }\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentVideoManager.setFullscreen(tag, value)\n    );\n  };\n\n  presentIOSFullscreenPlayer = async () => {\n    return this._setIOSFullscreen(true);\n  };\n\n  dismissIOSFullscreenPlayer = async () => {\n    return this._setIOSFullscreen(false);\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call the callback as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<PlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  setCallback = (callback: ?(status: PlaybackStatus) => void) => {\n    this.setNativeProps({ callback });\n    this.getStatusAsync();\n  };\n\n  // Loading / unloading API\n\n  loadAsync = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<PlaybackStatus> => {\n    const {\n      uri,\n      fullInitialStatus,\n    } = await _getURIAndFullInitialStatusForLoadAsync(\n      source,\n      initialStatus,\n      downloadFirst\n    );\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.loadForVideo(tag, uri, fullInitialStatus)\n    );\n  };\n\n  // Equivalent to setting URI to null.\n  unloadAsync = async (): Promise<PlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  // Set status API (only available while isLoaded = true)\n\n  setStatusAsync = async (\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> => {\n    _throwErrorIfValuesOutOfBoundsInStatus(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  // Additional convenience methods on top of setStatusAsync are defined via _COMMON_AV_PLAYBACK_METHODS:\n  playAsync: () => Promise<PlaybackStatus>;\n  playFromPositionAsync: (positionMillis: number) => Promise<PlaybackStatus>;\n  pauseAsync: () => Promise<PlaybackStatus>;\n  stopAsync: () => Promise<PlaybackStatus>;\n  setPositionAsync: (positionMillis: number) => Promise<PlaybackStatus>;\n  setRateAsync: (\n    rate: number,\n    shouldCorrectPitch: boolean\n  ) => Promise<PlaybackStatus>;\n  setVolumeAsync: (volume: number) => Promise<PlaybackStatus>;\n  setIsMutedAsync: (isMuted: boolean) => Promise<PlaybackStatus>;\n  setIsLoopingAsync: (isLooping: boolean) => Promise<PlaybackStatus>;\n  setProgressUpdateIntervalAsync: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<PlaybackStatus>;\n\n  // ### Callback wrappers ###\n\n  _nativeCallback = (event: { nativeEvent: PlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = (event: SyntheticEvent) => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: PlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(_getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: ReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: {\n    nativeEvent: FullscreenUpdateEvent,\n  }) => {\n    if (this.props.onIOSFullscreenUpdate) {\n      this.props.onIOSFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  render() {\n    const uri: ?string = _getURIFromSource(this.props.source);\n\n    let nativeResizeMode: Object =\n      NativeModules.UIManager.ExponentVideo.Constants.ScaleNone;\n    if (this.props.resizeMode) {\n      let resizeMode: ResizeMode = this.props.resizeMode;\n      if (resizeMode === Video.RESIZE_MODE_STRETCH) {\n        nativeResizeMode =\n          NativeModules.UIManager.ExponentVideo.Constants.ScaleToFill;\n      } else if (resizeMode === Video.RESIZE_MODE_CONTAIN) {\n        nativeResizeMode =\n          NativeModules.UIManager.ExponentVideo.Constants.ScaleAspectFit;\n      } else if (resizeMode === Video.RESIZE_MODE_COVER) {\n        nativeResizeMode =\n          NativeModules.UIManager.ExponentVideo.Constants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props (casting as Object to appease flow)\n    const status: Object = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach(prop => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props (casting as Object to appease flow)\n    const nativeProps: NativeProps = {\n      style: _STYLES.base,\n      ...this.props,\n      uri,\n      nativeResizeMode,\n      status,\n      onStatusUpdateNative: this._nativeCallback,\n      onLoadStartNative: this._nativeOnLoadStart,\n      onLoadNative: this._nativeOnLoad,\n      onErrorNative: this._nativeOnError,\n      onReadyForDisplayNative: this._nativeOnReadyForDisplay,\n      onFullscreenUpdateNative: this._nativeOnFullscreenUpdate,\n    };\n\n    return this.props.usePoster && this.state.showPoster\n      ? <View style={nativeProps.style}>\n          <ExponentVideo ref={this._assignRoot} {...nativeProps} />\n          <Image style={_STYLES.poster} source={this.props.posterSource} />\n        </View>\n      : <ExponentVideo ref={this._assignRoot} {...nativeProps} />;\n  }\n}\n\nObject.assign(Video.prototype, _COMMON_AV_PLAYBACK_METHODS);\n\nVideo.propTypes = {\n  // Source stuff\n  source: PropTypes.oneOfType([\n    PropTypes.shape({\n      uri: PropTypes.string,\n    }), // remote URI like { uri: 'http://foo/bar.mp4' }\n    PropTypes.number, // asset module like require('./foo/bar.mp4')\n  ]),\n  posterSource: PropTypes.oneOfType([\n    PropTypes.shape({\n      uri: PropTypes.string,\n    }), // remote URI like { uri: 'http://foo/bar.mp4' }\n    PropTypes.number, // asset module like require('./foo/bar.mp4')\n  ]),\n\n  // Callbacks\n  callback: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoad: PropTypes.func,\n  onError: PropTypes.func,\n  onIOSFullscreenUpdate: PropTypes.func,\n  onReadyForDisplay: PropTypes.func,\n\n  // UI stuff\n  useNativeControls: PropTypes.bool,\n  resizeMode: PropTypes.string,\n  usePoster: PropTypes.bool,\n\n  // Playback API\n  status: PropTypes.shape({\n    progressUpdateIntervalMillis: PropTypes.number,\n    positionMillis: PropTypes.number,\n    shouldPlay: PropTypes.bool,\n    rate: PropTypes.number,\n    shouldCorrectPitch: PropTypes.bool,\n    volume: PropTypes.number,\n    isMuted: PropTypes.bool,\n    isLooping: PropTypes.bool,\n  }),\n  progressUpdateIntervalMillis: PropTypes.number,\n  positionMillis: PropTypes.number,\n  shouldPlay: PropTypes.bool,\n  rate: PropTypes.number,\n  shouldCorrectPitch: PropTypes.bool,\n  volume: PropTypes.number,\n  isMuted: PropTypes.bool,\n  isLooping: PropTypes.bool,\n\n  // Required by react-native\n  scaleX: PropTypes.number,\n  scaleY: PropTypes.number,\n  translateX: PropTypes.number,\n  translateY: PropTypes.number,\n  rotation: PropTypes.number,\n  ...ViewPropTypes,\n};\n\nconst ExponentVideo = requireNativeComponent('ExponentVideo', Video, {\n  nativeOnly: {\n    uri: true,\n    nativeResizeMode: true,\n    onStatusUpdateNative: true,\n    onLoadStartNative: true,\n    onLoadNative: true,\n    onErrorNative: true,\n    onReadyForDisplayNative: true,\n    onFullscreenUpdateNative: true,\n  },\n});\n"]}]