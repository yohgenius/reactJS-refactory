["369d57077cc00c0d1c3550ab7bc517e47970f1df","38b3d7e0231aeed6b796d6bb2c0197e0898d4614",["fbjs/lib/Promise.native","pretty-format","promise/setimmediate/rejection-tracking"],[38,94,138],{"version":3,"sources":["/firstPro/node_modules/react-native/Libraries/Promise.js"],"names":["Promise","require","prettyFormat","__DEV__","enable","allRejections","onUnhandled","id","error","message","stack","stringValue","Object","prototype","toString","call","Error","warning","console","warn","onHandled","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,UAAUC,OAAV,2BAAN;;AAEA,IAAMC,eAAeD,OAAf,iBAAN;;AAEA,IAAIE,OAAJ,EAAa;AACXF,qDAAmDG,MAAnD,CAA0D;AACxDC,mBAAe,IADyC;AAExDC,iBAAa,qBAACC,EAAD,EAAoB;AAAA,UAAfC,KAAe,uEAAP,EAAO;;AAC/B,UAAIC,gBAAJ;AACA,UAAIC,cAAJ;;AAEA,UAAMC,cAAcC,OAAOC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BP,KAA/B,CAApB;AACA,UAAIG,gBAAgB,gBAApB,EAAsC;AACpCF,kBAAUO,MAAMH,SAAN,CAAgBC,QAAhB,CAAyBC,IAAzB,CAA8BP,KAA9B,CAAV;AACAE,gBAAQF,MAAME,KAAd;AACD,OAHD,MAGO;AACLD,kBAAUP,aAAaM,KAAb,CAAV;AACD;;AAED,UAAMS,UACJ,+CAA6CV,EAA7C,aACGE,OADH,YAECC,SAAS,IAAT,GAAgB,EAAhB,GAAqBA,KAFtB,CADF;AAIAQ,cAAQC,IAAR,CAAaF,OAAb;AACD,KAnBuD;AAoBxDG,eAAW,mBAACb,EAAD,EAAQ;AACjB,UAAMU,UACJ,oCAAkCV,EAAlC,WACA,8DADA,oDAE8CA,EAF9C,SADF;AAIAW,cAAQC,IAAR,CAAaF,OAAb;AACD;AA1BuD,GAA1D;AA4BD;;AAEDI,OAAOC,OAAP,GAAiBtB,OAAjB","sourcesContent":["/**\n * Copyright (c) 2016-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Promise\n * @flow\n */\n'use strict';\n\nconst Promise = require('fbjs/lib/Promise.native');\n\nconst prettyFormat = require('pretty-format');\n\nif (__DEV__) {\n  require('promise/setimmediate/rejection-tracking').enable({\n    allRejections: true,\n    onUnhandled: (id, error = {}) => {\n      let message: string;\n      let stack: ?string;\n\n      const stringValue = Object.prototype.toString.call(error);\n      if (stringValue === '[object Error]') {\n        message = Error.prototype.toString.call(error);\n        stack = error.stack;\n      } else {\n        message = prettyFormat(error);\n      }\n\n      const warning =\n        `Possible Unhandled Promise Rejection (id: ${id}):\\n` +\n        `${message}\\n` +\n        (stack == null ? '' : stack);\n      console.warn(warning);\n    },\n    onHandled: (id) => {\n      const warning =\n        `Promise Rejection Handled (id: ${id})\\n` +\n        'This means you can ignore any previous messages of the form ' +\n        `\"Possible Unhandled Promise Rejection (id: ${id}):\"`;\n      console.warn(warning);\n    },\n  });\n}\n\nmodule.exports = Promise;\n"]}]